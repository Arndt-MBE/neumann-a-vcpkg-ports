diff --git a/4c402af263-2906988cbb.clean/meson.build b/4c402af263-2906988cbb/meson.build
index 4d26af3f6..3321053dd 100644
--- a/4c402af263-2906988cbb.clean/meson.build
+++ b/4c402af263-2906988cbb/meson.build
@@ -1093,8 +1093,8 @@ endforeach
 if cc.has_function_attribute('visibility:hidden')
   pre_args += '-DHAVE_FUNC_ATTRIBUTE_VISIBILITY'
 endif
-if cc.compiles('__uint128_t foo(void) { return 0; }',
-               name : '__uint128_t')
+if (cc.compiles('__uint128_t foo(void) { return 0; }',
+               name : '__uint128_t') and not (cc.get_argument_syntax() == 'msvc'))
   pre_args += '-DHAVE_UINT128'
 endif
 
@@ -1328,7 +1328,7 @@ endif
 # Check for GCC style atomics
 dep_atomic = null_dep
 
-if cc.compiles('''#include <stdint.h>
+if (cc.compiles('''#include <stdint.h>
                   int main() {
                     struct {
                       uint64_t *v;
@@ -1337,7 +1337,7 @@ if cc.compiles('''#include <stdint.h>
                            (int)__atomic_add_fetch(x.v, (uint64_t)1, __ATOMIC_ACQ_REL);
 
                   }''',
-               name : 'GCC atomic builtins')
+               name : 'GCC atomic builtins') and not (cc.get_argument_syntax() == 'msvc'))
   pre_args += '-DUSE_GCC_ATOMIC_BUILTINS'
 
   # Not all atomic calls can be turned into lock-free instructions, in which
@@ -1358,13 +1358,13 @@ if cc.compiles('''#include <stdint.h>
     dep_atomic = cc.find_library('atomic')
   endif
 endif
-if not cc.links('''#include <stdint.h>
+if (not cc.links('''#include <stdint.h>
                    uint64_t v;
                    int main() {
                      return __sync_add_and_fetch(&v, (uint64_t)1);
                    }''',
                 dependencies : dep_atomic,
-                name : 'GCC 64bit atomics')
+                name : 'GCC 64bit atomics') or cc.get_argument_syntax() == 'msvc')
   pre_args += '-DMISSING_64BIT_ATOMICS'
 endif
 
@@ -1841,9 +1841,9 @@ endif
 # linking is requested, so we need to force the config-tool method to be used
 # in that case, but in 0.54.0 meson won't try the cmake method if shared
 # linking is requested.
-_llvm_method = 'auto'
+_llvm_method = 'cmake'
 if meson.version().version_compare('< 0.54.0') and _shared_llvm
-  _llvm_method = 'config-tool'
+  _llvm_method = 'cmake'
 endif
 
 dep_llvm = null_dep
diff --git a/4c402af263-2906988cbb.clean/src/compiler/nir/__pycache__/nir_algebraic.cpython-310.pyc b/4c402af263-2906988cbb/src/compiler/nir/__pycache__/nir_algebraic.cpython-310.pyc
index 9b5e8fd6e..a24d2ec28 100644
Binary files a/4c402af263-2906988cbb.clean/src/compiler/nir/__pycache__/nir_algebraic.cpython-310.pyc and b/4c402af263-2906988cbb/src/compiler/nir/__pycache__/nir_algebraic.cpython-310.pyc differ
diff --git a/4c402af263-2906988cbb.clean/src/compiler/nir/__pycache__/nir_intrinsics.cpython-310.pyc b/4c402af263-2906988cbb/src/compiler/nir/__pycache__/nir_intrinsics.cpython-310.pyc
index 780db7add..de3bfc6a7 100644
Binary files a/4c402af263-2906988cbb.clean/src/compiler/nir/__pycache__/nir_intrinsics.cpython-310.pyc and b/4c402af263-2906988cbb/src/compiler/nir/__pycache__/nir_intrinsics.cpython-310.pyc differ
diff --git a/4c402af263-2906988cbb.clean/src/compiler/nir/__pycache__/nir_opcodes.cpython-310.pyc b/4c402af263-2906988cbb/src/compiler/nir/__pycache__/nir_opcodes.cpython-310.pyc
index e52abf23b..a0bdc5d21 100644
Binary files a/4c402af263-2906988cbb.clean/src/compiler/nir/__pycache__/nir_opcodes.cpython-310.pyc and b/4c402af263-2906988cbb/src/compiler/nir/__pycache__/nir_opcodes.cpython-310.pyc differ
diff --git a/4c402af263-2906988cbb.clean/src/gallium/auxiliary/tgsi/tgsi_ureg.c b/4c402af263-2906988cbb/src/gallium/auxiliary/tgsi/tgsi_ureg.c
index b4cfae0e6..564e2c036 100644
--- a/4c402af263-2906988cbb.clean/src/gallium/auxiliary/tgsi/tgsi_ureg.c
+++ b/4c402af263-2906988cbb/src/gallium/auxiliary/tgsi/tgsi_ureg.c
@@ -481,7 +481,7 @@ out:
 
 struct ureg_dst
 ureg_DECL_output_masked(struct ureg_program *ureg,
-                        unsigned name,
+                        enum tgsi_semantic name,
                         unsigned index,
                         unsigned usage_mask,
                         unsigned array_id,
diff --git a/4c402af263-2906988cbb.clean/src/gallium/drivers/llvmpipe/lp_bld_interp.h b/4c402af263-2906988cbb/src/gallium/drivers/llvmpipe/lp_bld_interp.h
index 445c8655d..34e44ac09 100644
--- a/4c402af263-2906988cbb.clean/src/gallium/drivers/llvmpipe/lp_bld_interp.h
+++ b/4c402af263-2906988cbb/src/gallium/drivers/llvmpipe/lp_bld_interp.h
@@ -157,7 +157,7 @@ lp_build_interp_soa(struct lp_build_interp_soa_context *bld,
                     LLVMTypeRef mask_type,
                     LLVMValueRef mask_store,
                     unsigned attrib, unsigned chan,
-                    unsigned loc,
+                    enum tgsi_interpolate_loc loc,
                     LLVMValueRef indir_index,
                     LLVMValueRef offsets[2]);
 
diff --git a/4c402af263-2906988cbb.clean/src/mapi/glapi/gen/__pycache__/apiexec.cpython-310.pyc b/4c402af263-2906988cbb/src/mapi/glapi/gen/__pycache__/apiexec.cpython-310.pyc
index 327987809..48a5b0b23 100644
Binary files a/4c402af263-2906988cbb.clean/src/mapi/glapi/gen/__pycache__/apiexec.cpython-310.pyc and b/4c402af263-2906988cbb/src/mapi/glapi/gen/__pycache__/apiexec.cpython-310.pyc differ
diff --git a/4c402af263-2906988cbb.clean/src/mapi/glapi/gen/__pycache__/glX_XML.cpython-310.pyc b/4c402af263-2906988cbb/src/mapi/glapi/gen/__pycache__/glX_XML.cpython-310.pyc
index 35964066e..4f755213d 100644
Binary files a/4c402af263-2906988cbb.clean/src/mapi/glapi/gen/__pycache__/glX_XML.cpython-310.pyc and b/4c402af263-2906988cbb/src/mapi/glapi/gen/__pycache__/glX_XML.cpython-310.pyc differ
diff --git a/4c402af263-2906988cbb.clean/src/mapi/glapi/gen/__pycache__/gl_XML.cpython-310.pyc b/4c402af263-2906988cbb/src/mapi/glapi/gen/__pycache__/gl_XML.cpython-310.pyc
index 47996e3e7..2cf5cf19b 100644
Binary files a/4c402af263-2906988cbb.clean/src/mapi/glapi/gen/__pycache__/gl_XML.cpython-310.pyc and b/4c402af263-2906988cbb/src/mapi/glapi/gen/__pycache__/gl_XML.cpython-310.pyc differ
diff --git a/4c402af263-2906988cbb.clean/src/mapi/glapi/gen/__pycache__/license.cpython-310.pyc b/4c402af263-2906988cbb/src/mapi/glapi/gen/__pycache__/license.cpython-310.pyc
index 914f91c91..5dce85565 100644
Binary files a/4c402af263-2906988cbb.clean/src/mapi/glapi/gen/__pycache__/license.cpython-310.pyc and b/4c402af263-2906988cbb/src/mapi/glapi/gen/__pycache__/license.cpython-310.pyc differ
diff --git a/4c402af263-2906988cbb.clean/src/mapi/glapi/gen/__pycache__/marshal_XML.cpython-310.pyc b/4c402af263-2906988cbb/src/mapi/glapi/gen/__pycache__/marshal_XML.cpython-310.pyc
index 121dd8d36..40db1185f 100644
Binary files a/4c402af263-2906988cbb.clean/src/mapi/glapi/gen/__pycache__/marshal_XML.cpython-310.pyc and b/4c402af263-2906988cbb/src/mapi/glapi/gen/__pycache__/marshal_XML.cpython-310.pyc differ
diff --git a/4c402af263-2906988cbb.clean/src/mapi/glapi/gen/__pycache__/static_data.cpython-310.pyc b/4c402af263-2906988cbb/src/mapi/glapi/gen/__pycache__/static_data.cpython-310.pyc
index 816a05a13..476e9c9bd 100644
Binary files a/4c402af263-2906988cbb.clean/src/mapi/glapi/gen/__pycache__/static_data.cpython-310.pyc and b/4c402af263-2906988cbb/src/mapi/glapi/gen/__pycache__/static_data.cpython-310.pyc differ
diff --git a/4c402af263-2906988cbb.clean/src/mapi/glapi/gen/__pycache__/typeexpr.cpython-310.pyc b/4c402af263-2906988cbb/src/mapi/glapi/gen/__pycache__/typeexpr.cpython-310.pyc
index 259d2cc4f..dc0fa5092 100644
Binary files a/4c402af263-2906988cbb.clean/src/mapi/glapi/gen/__pycache__/typeexpr.cpython-310.pyc and b/4c402af263-2906988cbb/src/mapi/glapi/gen/__pycache__/typeexpr.cpython-310.pyc differ
diff --git a/4c402af263-2906988cbb/src/mapi/new/__pycache__/genCommon.cpython-310.pyc b/4c402af263-2906988cbb/src/mapi/new/__pycache__/genCommon.cpython-310.pyc
new file mode 100644
index 000000000..05c2486f3
Binary files /dev/null and b/4c402af263-2906988cbb/src/mapi/new/__pycache__/genCommon.cpython-310.pyc differ
diff --git a/4c402af263-2906988cbb/src/mesa/main/__pycache__/format_parser.cpython-310.pyc b/4c402af263-2906988cbb/src/mesa/main/__pycache__/format_parser.cpython-310.pyc
new file mode 100644
index 000000000..16fe4086e
Binary files /dev/null and b/4c402af263-2906988cbb/src/mesa/main/__pycache__/format_parser.cpython-310.pyc differ
diff --git a/4c402af263-2906988cbb/src/mesa/main/__pycache__/get_hash_params.cpython-310.pyc b/4c402af263-2906988cbb/src/mesa/main/__pycache__/get_hash_params.cpython-310.pyc
new file mode 100644
index 000000000..5d761304f
Binary files /dev/null and b/4c402af263-2906988cbb/src/mesa/main/__pycache__/get_hash_params.cpython-310.pyc differ
diff --git a/4c402af263-2906988cbb.clean/src/mesa/state_tracker/st_texture.h b/4c402af263-2906988cbb/src/mesa/state_tracker/st_texture.h
index 064200d07..ecc09b4d1 100644
--- a/4c402af263-2906988cbb.clean/src/mesa/state_tracker/st_texture.h
+++ b/4c402af263-2906988cbb/src/mesa/state_tracker/st_texture.h
@@ -233,13 +233,13 @@ st_compressed_format_fallback(struct st_context *st, mesa_format format);
 
 void
 st_convert_image(const struct st_context *st, const struct gl_image_unit *u,
-                 struct pipe_image_view *img, unsigned shader_access);
+                 struct pipe_image_view *img, enum gl_access_qualifier shader_access);
 
 void
 st_convert_image_from_unit(const struct st_context *st,
                            struct pipe_image_view *img,
                            GLuint imgUnit,
-                           unsigned shader_access);
+                           enum gl_access_qualifier shader_access);
 
 void
 st_convert_sampler(const struct st_context *st,
diff --git a/4c402af263-2906988cbb/src/util/format/__pycache__/u_format_pack.cpython-310.pyc b/4c402af263-2906988cbb/src/util/format/__pycache__/u_format_pack.cpython-310.pyc
new file mode 100644
index 000000000..7d303d35e
Binary files /dev/null and b/4c402af263-2906988cbb/src/util/format/__pycache__/u_format_pack.cpython-310.pyc differ
diff --git a/4c402af263-2906988cbb/src/util/format/__pycache__/u_format_parse.cpython-310.pyc b/4c402af263-2906988cbb/src/util/format/__pycache__/u_format_parse.cpython-310.pyc
new file mode 100644
index 000000000..1d42ae588
Binary files /dev/null and b/4c402af263-2906988cbb/src/util/format/__pycache__/u_format_parse.cpython-310.pyc differ
diff --git a/4c402af263-2906988cbb/src/util/perf/__pycache__/u_trace.cpython-310.pyc b/4c402af263-2906988cbb/src/util/perf/__pycache__/u_trace.cpython-310.pyc
new file mode 100644
index 000000000..9aa8ce2ea
Binary files /dev/null and b/4c402af263-2906988cbb/src/util/perf/__pycache__/u_trace.cpython-310.pyc differ
diff --git a/4c402af263-2906988cbb.clean/src/util/u_atomic.h b/4c402af263-2906988cbb/src/util/u_atomic.h
index ec4569d24..ed9396869 100644
--- a/4c402af263-2906988cbb.clean/src/util/u_atomic.h
+++ b/4c402af263-2906988cbb/src/util/u_atomic.h
@@ -36,6 +36,7 @@
 #if defined(PIPE_ATOMIC_GCC_INTRINSIC)
 
 #define PIPE_ATOMIC "GCC Sync Intrinsics"
+#error "NO GCC DAMNIT!"
 
 #if defined(USE_GCC_ATOMIC_BUILTINS)
 
@@ -129,6 +130,16 @@ __forceinline short _interlockedadd16(short volatile * _Addend, short _Value)
    return _InterlockedExchangeAdd16(_Addend, _Value) + _Value;
 }
 
+__forceinline long _interlockedadd(long volatile * _Addend, long _Value)
+{
+   return _InterlockedExchangeAdd(_Addend, _Value) + _Value;
+}
+
+__forceinline __int64 _interlockedadd64(__int64 volatile * _Addend, __int64 _Value)
+{
+   return _InterlockedExchangeAdd64(_Addend, _Value) + _Value;
+}
+
 /* MSVC supports decltype keyword, but it's only supported on C++ and doesn't
  * quite work here; and if a C++-only solution is worthwhile, then it would be
  * better to use templates / function overloading, instead of decltype magic.
@@ -149,7 +160,7 @@ __forceinline short _interlockedadd16(short volatile * _Addend, short _Value)
    sizeof *(_v) == sizeof(char)    ? p_atomic_add_return((_v), 1) : \
    sizeof *(_v) == sizeof(short)   ? _InterlockedIncrement16((short *)  (_v)) : \
    sizeof *(_v) == sizeof(long)    ? _InterlockedIncrement  ((long *)   (_v)) : \
-   sizeof *(_v) == sizeof(__int64) ? _interlockedincrement64((__int64 *)(_v)) : \
+   sizeof *(_v) == sizeof(__int64) ? _InterlockedIncrement64((__int64 *)(_v)) : \
                                      (assert(!"should not get here"), 0))
 
 #define p_atomic_dec(_v) \
@@ -159,7 +170,7 @@ __forceinline short _interlockedadd16(short volatile * _Addend, short _Value)
    sizeof *(_v) == sizeof(char)    ? p_atomic_add_return((_v), -1) : \
    sizeof *(_v) == sizeof(short)   ? _InterlockedDecrement16((short *)  (_v)) : \
    sizeof *(_v) == sizeof(long)    ? _InterlockedDecrement  ((long *)   (_v)) : \
-   sizeof *(_v) == sizeof(__int64) ? _interlockeddecrement64((__int64 *)(_v)) : \
+   sizeof *(_v) == sizeof(__int64) ? _InterlockedDecrement64((__int64 *)(_v)) : \
                                      (assert(!"should not get here"), 0))
 
 #define p_atomic_add(_v, _i) \
@@ -176,7 +187,7 @@ __forceinline short _interlockedadd16(short volatile * _Addend, short _Value)
    sizeof *(_v) == sizeof(char)    ? _InterlockedExchangeAdd8 ((char *)   (_v), (_i)) : \
    sizeof *(_v) == sizeof(short)   ? _InterlockedExchangeAdd16((short *)  (_v), (_i)) : \
    sizeof *(_v) == sizeof(long)    ? _InterlockedExchangeAdd  ((long *)   (_v), (_i)) : \
-   sizeof *(_v) == sizeof(__int64) ? _interlockedexchangeadd64((__int64 *)(_v), (_i)) : \
+   sizeof *(_v) == sizeof(__int64) ? _InterlockedExchangeAdd64((__int64 *)(_v), (_i)) : \
                                      (assert(!"should not get here"), 0))
 
 #define p_atomic_cmpxchg(_v, _old, _new) (\
@@ -197,7 +208,7 @@ __forceinline short _interlockedadd16(short volatile * _Addend, short _Value)
    sizeof *(_v) == sizeof(char)    ? _InterlockedExchange8 ((char *)   (_v), (char)   (_new)) : \
    sizeof *(_v) == sizeof(short)   ? _InterlockedExchange16((short *)  (_v), (short)  (_new)) : \
    sizeof *(_v) == sizeof(long)    ? _InterlockedExchange  ((long *)   (_v), (long)   (_new)) : \
-   sizeof *(_v) == sizeof(__int64) ? _interlockedexchange64((__int64 *)(_v), (__int64)(_new)) : \
+   sizeof *(_v) == sizeof(__int64) ? _InterlockedExchange64((__int64 *)(_v), (__int64)(_new)) : \
                                      (assert(!"should not get here"), 0))
 
 #endif
