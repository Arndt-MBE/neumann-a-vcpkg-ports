diff --git a/CMakeLists.txt b/CMakeLists.txt
index fd17283f7..a1207b2f6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -855,7 +855,7 @@ endif()
 # check all 3rdparty include paths
 string (REGEX REPLACE ";" " " 3RDPARTY_NOT_INCLUDED "${3RDPARTY_NOT_INCLUDED}")
 if (3RDPARTY_NOT_INCLUDED)
-  message (FATAL_ERROR "Could not find headers of used third-party products: ${3RDPARTY_NOT_INCLUDED}" )
+  message (WARNING "Could not find headers of used third-party products: ${3RDPARTY_NOT_INCLUDED}" )
 endif()
 
 if (3RDPARTY_INCLUDE_DIRS)
diff --git a/adm/cmake/draco.cmake b/adm/cmake/draco.cmake
index cebc75df9..dfe900a46 100644
--- a/adm/cmake/draco.cmake
+++ b/adm/cmake/draco.cmake
@@ -40,7 +40,7 @@ endif()
 
 # header
 if (NOT 3RDPARTY_DRACO_INCLUDE_DIR OR NOT EXISTS "${3RDPARTY_DRACO_INCLUDE_DIR}")
-  set (HEADER_NAMES draco)
+  set (HEADER_NAMES draco draco_features)
 
   # set 3RDPARTY_DRACO_INCLUDE_DIR as notfound, otherwise find_path can't assign a new value to 3RDPARTY_DRACO_INCLUDE_DIR
   set (3RDPARTY_DRACO_INCLUDE_DIR "3RDPARTY_DRACO_INCLUDE_DIR-NOTFOUND" CACHE FILEPATH "The directory containing headers of the Draco" FORCE)
@@ -48,7 +48,7 @@ if (NOT 3RDPARTY_DRACO_INCLUDE_DIR OR NOT EXISTS "${3RDPARTY_DRACO_INCLUDE_DIR}"
   if (3RDPARTY_DRACO_DIR AND EXISTS "${3RDPARTY_DRACO_DIR}")
     find_path (3RDPARTY_DRACO_INCLUDE_DIR NAMES ${HEADER_NAMES}
                                                  PATHS ${3RDPARTY_DRACO_DIR}
-                                                 PATH_SUFFIXES "include"
+                                                 PATH_SUFFIXES "include" "include/draco"
                                                  CMAKE_FIND_ROOT_PATH_BOTH
                                                  NO_DEFAULT_PATH)
   endif()
@@ -62,7 +62,7 @@ endif()
 
 if (3RDPARTY_DRACO_DIR AND EXISTS "${3RDPARTY_DRACO_DIR}")
   if (NOT 3RDPARTY_DRACO_LIBRARY OR NOT EXISTS "${3RDPARTY_DRACO_LIBRARY}")
-    set (CMAKE_FIND_LIBRARY_SUFFIXES .lib .a)
+    #set (CMAKE_FIND_LIBRARY_SUFFIXES .lib .a)
     set (3RDPARTY_DRACO_LIBRARY "3RDPARTY_DRACO_LIBRARY-NOTFOUND" CACHE FILEPATH "The path to Draco library" FORCE)
 
     find_library (3RDPARTY_DRACO_LIBRARY NAMES ${CSF_Draco}
@@ -77,7 +77,7 @@ if (3RDPARTY_DRACO_DIR AND EXISTS "${3RDPARTY_DRACO_DIR}")
   endif()
 
   if (WIN32 AND (NOT 3RDPARTY_DRACO_LIBRARY_DEBUG OR NOT EXISTS "${3RDPARTY_DRACO_LIBRARY_DEBUG}"))
-    set (CMAKE_FIND_LIBRARY_SUFFIXES .lib .a)
+    #set (CMAKE_FIND_LIBRARY_SUFFIXES .lib .a)
     set (3RDPARTY_DRACO_LIBRARY_DEBUG "3RDPARTY_DRACO_LIBRARY_DEBUG-NOTFOUND" CACHE FILEPATH "The path to debug Draco library" FORCE)
 
     find_library (3RDPARTY_DRACO_LIBRARY_DEBUG NAMES ${CSF_Draco}
diff --git a/adm/cmake/freetype.cmake b/adm/cmake/freetype.cmake
index 8563c24f2..044afd0c6 100644
--- a/adm/cmake/freetype.cmake
+++ b/adm/cmake/freetype.cmake
@@ -114,7 +114,7 @@ if (IS_BUILTIN_SEARCH_REQUIRED)
   find_package(Freetype)
 
   # Only for UNIX (not APPLE)
-  if ((NOT WIN32) AND (NOT APPLE))
+  if (0)
     # To avoid linker error on Ubuntu 18.04 and others linux distributives we should
     # link with freetype library, compiled as Position Independent Code (PIC),
     # for example, with shared object.
@@ -229,7 +229,7 @@ else()
 endif()
 
 # freetype library
-#if (BUILD_SHARED_LIBS)
+if (0)
   if (NOT 3RDPARTY_FREETYPE_LIBRARY OR NOT EXISTS "${3RDPARTY_FREETYPE_LIBRARY}")
     set (CMAKE_FIND_LIBRARY_SUFFIXES .lib .so .dylib)
 
@@ -366,7 +366,7 @@ endif()
       set (USED_3RDPARTY_FREETYPE_DIR ${3RDPARTY_FREETYPE_LIBRARY_DIR})
     endif()
   endif()
-#endif()
+endif()
 
 # unset all redundant variables
 OCCT_CHECK_AND_UNSET(FREETYPE_INCLUDE_DIR_ft2build)
diff --git a/adm/cmake/occt_defs_flags.cmake b/adm/cmake/occt_defs_flags.cmake
index 33b50e8ce..92112b538 100644
--- a/adm/cmake/occt_defs_flags.cmake
+++ b/adm/cmake/occt_defs_flags.cmake
@@ -25,8 +25,6 @@ if (NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
 endif()
 
 if (MSVC)
-  # suppress C26812 on VS2019/C++20 (prefer 'enum class' over 'enum')
-  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /fp:precise /wd\"26812\"")
   # suppress warning on using portable non-secure functions in favor of non-portable secure ones
   add_definitions (-D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE)
 else()
diff --git a/adm/templates/OpenCASCADEConfig.cmake.in b/adm/templates/OpenCASCADEConfig.cmake.in
index e391ddfe8..7a32b8004 100644
--- a/adm/templates/OpenCASCADEConfig.cmake.in
+++ b/adm/templates/OpenCASCADEConfig.cmake.in
@@ -24,10 +24,7 @@ set (OpenCASCADE_DEVELOPMENT_VERSION "@OCC_VERSION_DEVELOPMENT@")
 # - in Android style: $INSTALL_DIR/libs/$CMAKE_ANDROID_ARCH_ABI/cmake/opencascade-<version>
 get_filename_component (OpenCASCADE_INSTALL_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
 get_filename_component (OpenCASCADE_INSTALL_PREFIX "${OpenCASCADE_INSTALL_PREFIX}" PATH)
-if (OpenCASCADE_INSTALL_PREFIX MATCHES "/cmake$")
-  get_filename_component (OpenCASCADE_INSTALL_PREFIX "${OpenCASCADE_INSTALL_PREFIX}" PATH)
-endif()
-if (OpenCASCADE_INSTALL_PREFIX MATCHES "/lib$")
+if (OpenCASCADE_INSTALL_PREFIX MATCHES "/(cmake|lib|share)$")
   get_filename_component (OpenCASCADE_INSTALL_PREFIX "${OpenCASCADE_INSTALL_PREFIX}" PATH)
 endif()
 if (OpenCASCADE_INSTALL_PREFIX MATCHES "/libs/${CMAKE_ANDROID_ARCH_ABI}$")
