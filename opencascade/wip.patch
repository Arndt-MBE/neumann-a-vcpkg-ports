diff --git a/ba3c4ac855-effc3f69de.clean/CMakeLists.txt b/ba3c4ac855-effc3f69de/CMakeLists.txt
index fd17283f7..a1207b2f6 100644
--- a/ba3c4ac855-effc3f69de.clean/CMakeLists.txt
+++ b/ba3c4ac855-effc3f69de/CMakeLists.txt
@@ -855,7 +855,7 @@ endif()
 # check all 3rdparty include paths
 string (REGEX REPLACE ";" " " 3RDPARTY_NOT_INCLUDED "${3RDPARTY_NOT_INCLUDED}")
 if (3RDPARTY_NOT_INCLUDED)
-  message (FATAL_ERROR "Could not find headers of used third-party products: ${3RDPARTY_NOT_INCLUDED}" )
+  message (WARNING "Could not find headers of used third-party products: ${3RDPARTY_NOT_INCLUDED}" )
 endif()
 
 if (3RDPARTY_INCLUDE_DIRS)
diff --git a/ba3c4ac855-effc3f69de.clean/adm/cmake/draco.cmake b/ba3c4ac855-effc3f69de/adm/cmake/draco.cmake
index cebc75df9..dfe900a46 100644
--- a/ba3c4ac855-effc3f69de.clean/adm/cmake/draco.cmake
+++ b/ba3c4ac855-effc3f69de/adm/cmake/draco.cmake
@@ -40,7 +40,7 @@ endif()
 
 # header
 if (NOT 3RDPARTY_DRACO_INCLUDE_DIR OR NOT EXISTS "${3RDPARTY_DRACO_INCLUDE_DIR}")
-  set (HEADER_NAMES draco)
+  set (HEADER_NAMES draco draco_features)
 
   # set 3RDPARTY_DRACO_INCLUDE_DIR as notfound, otherwise find_path can't assign a new value to 3RDPARTY_DRACO_INCLUDE_DIR
   set (3RDPARTY_DRACO_INCLUDE_DIR "3RDPARTY_DRACO_INCLUDE_DIR-NOTFOUND" CACHE FILEPATH "The directory containing headers of the Draco" FORCE)
@@ -48,7 +48,7 @@ if (NOT 3RDPARTY_DRACO_INCLUDE_DIR OR NOT EXISTS "${3RDPARTY_DRACO_INCLUDE_DIR}"
   if (3RDPARTY_DRACO_DIR AND EXISTS "${3RDPARTY_DRACO_DIR}")
     find_path (3RDPARTY_DRACO_INCLUDE_DIR NAMES ${HEADER_NAMES}
                                                  PATHS ${3RDPARTY_DRACO_DIR}
-                                                 PATH_SUFFIXES "include"
+                                                 PATH_SUFFIXES "include" "include/draco"
                                                  CMAKE_FIND_ROOT_PATH_BOTH
                                                  NO_DEFAULT_PATH)
   endif()
@@ -62,7 +62,7 @@ endif()
 
 if (3RDPARTY_DRACO_DIR AND EXISTS "${3RDPARTY_DRACO_DIR}")
   if (NOT 3RDPARTY_DRACO_LIBRARY OR NOT EXISTS "${3RDPARTY_DRACO_LIBRARY}")
-    set (CMAKE_FIND_LIBRARY_SUFFIXES .lib .a)
+    #set (CMAKE_FIND_LIBRARY_SUFFIXES .lib .a)
     set (3RDPARTY_DRACO_LIBRARY "3RDPARTY_DRACO_LIBRARY-NOTFOUND" CACHE FILEPATH "The path to Draco library" FORCE)
 
     find_library (3RDPARTY_DRACO_LIBRARY NAMES ${CSF_Draco}
@@ -77,7 +77,7 @@ if (3RDPARTY_DRACO_DIR AND EXISTS "${3RDPARTY_DRACO_DIR}")
   endif()
 
   if (WIN32 AND (NOT 3RDPARTY_DRACO_LIBRARY_DEBUG OR NOT EXISTS "${3RDPARTY_DRACO_LIBRARY_DEBUG}"))
-    set (CMAKE_FIND_LIBRARY_SUFFIXES .lib .a)
+    #set (CMAKE_FIND_LIBRARY_SUFFIXES .lib .a)
     set (3RDPARTY_DRACO_LIBRARY_DEBUG "3RDPARTY_DRACO_LIBRARY_DEBUG-NOTFOUND" CACHE FILEPATH "The path to debug Draco library" FORCE)
 
     find_library (3RDPARTY_DRACO_LIBRARY_DEBUG NAMES ${CSF_Draco}
diff --git a/ba3c4ac855-effc3f69de.clean/adm/cmake/freetype.cmake b/ba3c4ac855-effc3f69de/adm/cmake/freetype.cmake
index 8563c24f2..044afd0c6 100644
--- a/ba3c4ac855-effc3f69de.clean/adm/cmake/freetype.cmake
+++ b/ba3c4ac855-effc3f69de/adm/cmake/freetype.cmake
@@ -114,7 +114,7 @@ if (IS_BUILTIN_SEARCH_REQUIRED)
   find_package(Freetype)
 
   # Only for UNIX (not APPLE)
-  if ((NOT WIN32) AND (NOT APPLE))
+  if (0)
     # To avoid linker error on Ubuntu 18.04 and others linux distributives we should
     # link with freetype library, compiled as Position Independent Code (PIC),
     # for example, with shared object.
@@ -229,7 +229,7 @@ else()
 endif()
 
 # freetype library
-#if (BUILD_SHARED_LIBS)
+if (0)
   if (NOT 3RDPARTY_FREETYPE_LIBRARY OR NOT EXISTS "${3RDPARTY_FREETYPE_LIBRARY}")
     set (CMAKE_FIND_LIBRARY_SUFFIXES .lib .so .dylib)
 
@@ -366,7 +366,7 @@ endif()
       set (USED_3RDPARTY_FREETYPE_DIR ${3RDPARTY_FREETYPE_LIBRARY_DIR})
     endif()
   endif()
-#endif()
+endif()
 
 # unset all redundant variables
 OCCT_CHECK_AND_UNSET(FREETYPE_INCLUDE_DIR_ft2build)
diff --git a/ba3c4ac855-effc3f69de.clean/src/Image/Image_VideoRecorder.cxx b/ba3c4ac855-effc3f69de/src/Image/Image_VideoRecorder.cxx
index e2a397772..a5523b8a2 100644
--- a/ba3c4ac855-effc3f69de.clean/src/Image/Image_VideoRecorder.cxx
+++ b/ba3c4ac855-effc3f69de/src/Image/Image_VideoRecorder.cxx
@@ -76,11 +76,6 @@ Image_VideoRecorder::Image_VideoRecorder()
 {
   myFrameRate.num = 1;
   myFrameRate.den = 30;
-
-#ifdef HAVE_FFMPEG
-  // initialize libavcodec, and register all codecs and formats, should be done once
-  av_register_all();
-#endif
 }
 
 //=============================================================================
@@ -137,7 +132,9 @@ void Image_VideoRecorder::Close()
   // close each codec
   if (myVideoStream != NULL)
   {
-    avcodec_close (myVideoStream->codec);
+    AVCodecContext* ctx = nullptr;
+    int err = avcodec_parameters_to_context(ctx, myVideoStream->codecpar);
+    avcodec_close (ctx);
     myVideoStream = NULL;
   }
   if (myFrame != NULL)
@@ -265,7 +262,7 @@ Standard_Boolean Image_VideoRecorder::addVideoStream (const Image_VideoParams& t
   }
   myVideoStream->id = myAVContext->nb_streams - 1;
 
-  AVCodecContext* aCodecCtx = myVideoStream->codec;
+  AVCodecContext* aCodecCtx = avcodec_find_decoder(myVideoStream->codecpar->codec_id);
   aCodecCtx->codec_id = aCodecId;
   // resolution must be a multiple of two
   aCodecCtx->width    = theParams.Width;
@@ -297,7 +294,7 @@ Standard_Boolean Image_VideoRecorder::openVideoCodec (const Image_VideoParams& t
 {
 #ifdef HAVE_FFMPEG
   AVDictionary* anOptions = NULL;
-  AVCodecContext* aCodecCtx = myVideoStream->codec;
+  AVCodecContext* aCodecCtx = avcodec_find_decoder(myVideoStream->codecpar->codec_id);
 
   // setup default values
   aCodecCtx->pix_fmt = AV_PIX_FMT_YUV420P;
@@ -437,7 +434,7 @@ Standard_Boolean Image_VideoRecorder::writeVideoFrame (const Standard_Boolean th
   }
 
   int aResAv = 0;
-  AVCodecContext* aCodecCtx = myVideoStream->codec;
+  AVCodecContext* aCodecCtx = avcodec_find_decoder(myVideoStream->codecpar->codec_id);
   if (!theToFlush)
   {
     uint8_t* aSrcData[4]     = { (uint8_t*)myImgSrcRgba.ChangeData(),   NULL, NULL, NULL };
diff --git a/ba3c4ac855-effc3f69de.clean/src/Image/Image_VideoRecorder.hxx b/ba3c4ac855-effc3f69de/src/Image/Image_VideoRecorder.hxx
index 42c282c0c..33edf95e2 100644
--- a/ba3c4ac855-effc3f69de.clean/src/Image/Image_VideoRecorder.hxx
+++ b/ba3c4ac855-effc3f69de/src/Image/Image_VideoRecorder.hxx
@@ -133,7 +133,7 @@ protected:
 
   AVFormatContext* myAVContext;   //!< video context
   AVStream*        myVideoStream; //!< video stream
-  AVCodec*         myVideoCodec;  //!< video codec
+  AVCodec const *  myVideoCodec;  //!< video codec
   AVFrame*         myFrame;       //!< frame to record
   SwsContext*      myScaleCtx;    //!< scale context for conversion from RGBA to YUV
 
diff --git a/ba3c4ac855-effc3f69de.clean/src/Media/Media_CodecContext.cxx b/ba3c4ac855-effc3f69de/src/Media/Media_CodecContext.cxx
index ee0446eea..6833411b7 100644
--- a/ba3c4ac855-effc3f69de.clean/src/Media/Media_CodecContext.cxx
+++ b/ba3c4ac855-effc3f69de/src/Media/Media_CodecContext.cxx
@@ -28,10 +28,13 @@
 
 #ifdef HAVE_FFMPEG
 #include <Standard_WarningsDisable.hxx>
+
 extern "C"
 {
-  #include <libavformat/avformat.h>
+#include <libavformat/avformat.h>
+#include <libavcodec/avcodec.h>
 };
+
 #include <Standard_WarningsRestore.hxx>
 #endif
 
diff --git a/ba3c4ac855-effc3f69de.clean/src/Media/Media_CodecContext.hxx b/ba3c4ac855-effc3f69de/src/Media/Media_CodecContext.hxx
index b02037e8a..45cb00277 100644
--- a/ba3c4ac855-effc3f69de.clean/src/Media/Media_CodecContext.hxx
+++ b/ba3c4ac855-effc3f69de/src/Media/Media_CodecContext.hxx
@@ -88,7 +88,7 @@ public:
 protected:
 
   AVCodecContext* myCodecCtx;         //!< codec context
-  AVCodec*        myCodec;            //!< opened codec
+  AVCodec const * myCodec;            //!< opened codec
   double          myPtsStartBase;     //!< starting PTS in context
   double          myPtsStartStream;   //!< starting PTS in the stream
   double          myTimeBase;         //!< stream timebase
diff --git a/ba3c4ac855-effc3f69de.clean/src/Media/Media_FormatContext.cxx b/ba3c4ac855-effc3f69de/src/Media/Media_FormatContext.cxx
index 55f1254d9..c1b025a2c 100644
--- a/ba3c4ac855-effc3f69de.clean/src/Media/Media_FormatContext.cxx
+++ b/ba3c4ac855-effc3f69de/src/Media/Media_FormatContext.cxx
@@ -27,6 +27,7 @@
 extern "C"
 {
   #include <libavformat/avformat.h>
+  #include <libavcodec/avcodec.h>
 };
 #include <Standard_WarningsRestore.hxx>
 #endif
@@ -409,9 +410,7 @@ TCollection_AsciiString Media_FormatContext::StreamInfo (unsigned int theIndex,
   AVCodecContext* aCodecCtx = theCodecCtx;
   if (aCodecCtx == NULL)
   {
-  Standard_DISABLE_DEPRECATION_WARNINGS
-    aCodecCtx = aStream.codec;
-  Standard_ENABLE_DEPRECATION_WARNINGS
+    int err = avcodec_parameters_to_context(aCodecCtx, aStream->codecpar);
   }
 
   char aFrmtBuff[4096] = {};
@@ -499,7 +498,7 @@ bool Media_FormatContext::SeekStream (unsigned int theStreamId,
 
   // try 10 more times in backward direction to work-around huge duration between key frames
   // will not work for some streams with undefined cur_dts (AV_NOPTS_VALUE)!!!
-  for (int aTries = 10; isSeekDone && theToSeekBack && aTries > 0 && (aStream.cur_dts > aSeekTarget); --aTries)
+  for (int aTries = 10; isSeekDone && theToSeekBack && aTries > 0; --aTries)
   {
     aSeekTarget -= StreamSecondsToUnits (aStream, 1.0);
     isSeekDone = av_seek_frame (myFormatCtx, theStreamId, aSeekTarget, aFlags) >= 0;
