diff --git a/src/DriverDAT/DriverDAT_R_SMDS_Mesh.cxx b/src/DriverDAT/DriverDAT_R_SMDS_Mesh.cxx
index c0cc72a85..6ac55b859 100644
--- a/src/DriverDAT/DriverDAT_R_SMDS_Mesh.cxx
+++ b/src/DriverDAT/DriverDAT_R_SMDS_Mesh.cxx
@@ -21,6 +21,9 @@
 //
 
 #include <stdio.h>
+#include <locale>
+#include <codecvt>
+
 
 #include "DriverDAT_R_SMDS_Mesh.h"
 #include "SMDS_Mesh.hxx"
@@ -51,8 +54,12 @@ Driver_Mesh::Status DriverDAT_R_SMDS_Mesh::Perform()
    *                      OUVERTURE DU FICHIER EN LECTURE                      *
    ****************************************************************************/
 #if defined(WIN32) && defined(UNICODE)
-  std::wstring file2Read = Kernel_Utils::utf8_decode_s(myFile);
-  FILE* aFileId = _wfopen(file2Read.c_str(), L"r");
+  std::wstring file2Readw = Kernel_Utils::utf8_decode_s(myFile);
+  FILE* aFileId = _wfopen(file2Readw.c_str(), L"r");
+  using convert_type = std::codecvt_utf8<wchar_t>;
+  std::wstring_convert<convert_type, wchar_t> converter;
+  std::string file2Reads = converter.to_bytes( file2Readw );
+  char *file2Read = (char *)file2Reads.c_str();
 #else
   char *file2Read = (char *)myFile.c_str();
   FILE* aFileId = fopen(file2Read, "r");
diff --git a/src/DriverDAT/DriverDAT_W_SMDS_Mesh.cxx b/src/DriverDAT/DriverDAT_W_SMDS_Mesh.cxx
index 119f8f9a0..54de31fd5 100644
--- a/src/DriverDAT/DriverDAT_W_SMDS_Mesh.cxx
+++ b/src/DriverDAT/DriverDAT_W_SMDS_Mesh.cxx
@@ -21,7 +21,8 @@
 //
 
 #include <stdio.h>
-
+#include <locale>
+#include <codecvt>
 #include "DriverDAT_W_SMDS_Mesh.h"
 
 #include "SMDS_Mesh.hxx"
@@ -47,9 +48,12 @@ Driver_Mesh::Status DriverDAT_W_SMDS_Mesh::Perform()
 
   smIdType nbNodes, nbCells;
 #if defined(WIN32) && defined(UNICODE)
-  std::wstring file2Read = Kernel_Utils::utf8_decode_s(myFile);
-  FILE* aFileId = _wfopen(file2Read.c_str(), L"w+");
-
+  std::wstring file2Readw = Kernel_Utils::utf8_decode_s(myFile);
+  FILE* aFileId = _wfopen(file2Readw.c_str(), L"w+");
+  using convert_type = std::codecvt_utf8<wchar_t>;
+  std::wstring_convert<convert_type, wchar_t> converter;
+  std::string file2Reads = converter.to_bytes( file2Readw );
+  char *file2Read = (char *)file2Reads.c_str();
 #else
   char *file2Read = (char *)myFile.c_str();
   FILE* aFileId = fopen(file2Read, "w+");
diff --git a/src/SMESHUtils/SMESH_ControlPnt.cxx b/src/SMESHUtils/SMESH_ControlPnt.cxx
index d512e1c16..c4222f5ce 100644
--- a/src/SMESHUtils/SMESH_ControlPnt.cxx
+++ b/src/SMESHUtils/SMESH_ControlPnt.cxx
@@ -169,17 +169,16 @@ void SMESHUtils::createPointsSampleFromFace( const TopoDS_Face&       theFace,
 
   // GetNodes
   int nbNodes = aTri->NbNodes();
-  TColgp_Array1OfPnt nodes(1,nbNodes);
-  nodes = aTri->Nodes();
+  auto nodes = aTri->MapNodeArray();
 
   // Iterate on triangles and subdivide them
   thePoints.reserve( thePoints.size() + nbTriangles );
   for ( int i = 1; i <= nbTriangles; i++ )
   {
     const Poly_Triangle& aTriangle = triangles.Value(i);
-    gp_Pnt p1 = nodes.Value(aTriangle.Value(1));
-    gp_Pnt p2 = nodes.Value(aTriangle.Value(2));
-    gp_Pnt p3 = nodes.Value(aTriangle.Value(3));
+    gp_Pnt p1 = nodes->Value(aTriangle.Value(1));
+    gp_Pnt p2 = nodes->Value(aTriangle.Value(2));
+    gp_Pnt p3 = nodes->Value(aTriangle.Value(3));
 
     p1.Transform(aTrsf);
     p2.Transform(aTrsf);
diff --git a/src/SMESHUtils/SMESH_File.cxx b/src/SMESHUtils/SMESH_File.cxx
index 9e3d75263..c161cb98f 100644
--- a/src/SMESHUtils/SMESH_File.cxx
+++ b/src/SMESHUtils/SMESH_File.cxx
@@ -149,7 +149,7 @@ void SMESH_File::close()
     _pos = _end = 0;
     _size = -1;
   }
-  else if ( _file >= 0 )
+  else if ( _file != 0 )
   {
 #ifdef WIN32
     if(_file != INVALID_HANDLE_VALUE) {
diff --git a/src/StdMeshers/StdMeshers_Adaptive1D.cxx b/src/StdMeshers/StdMeshers_Adaptive1D.cxx
index bd5d9580a..e4020e828 100644
--- a/src/StdMeshers/StdMeshers_Adaptive1D.cxx
+++ b/src/StdMeshers/StdMeshers_Adaptive1D.cxx
@@ -319,7 +319,7 @@ namespace // internal utils
     {
       myFaceTol         = SMESH_MesherHelper::MaxTolerance( face );
       myTree            = triaTree;
-      myNodes           = & tr->Nodes();
+      myNodes           = & (*tr->MapNodeArray());
       myPolyTrias       = & tr->Triangles();
       myTriasDeflection = tr->Deflection();
       if ( !loc.IsIdentity() ) // transform nodes if necessary
diff --git a/src/StdMeshers/StdMeshers_Projection_2D.cxx b/src/StdMeshers/StdMeshers_Projection_2D.cxx
index dcc3f1e0b..c31e5887a 100644
--- a/src/StdMeshers/StdMeshers_Projection_2D.cxx
+++ b/src/StdMeshers/StdMeshers_Projection_2D.cxx
@@ -62,8 +62,6 @@
 #include <GeomAPI_ExtremaCurveCurve.hxx>
 #include <GeomAPI_ProjectPointOnSurf.hxx>
 #include <GeomAdaptor_Curve.hxx>
-#include <GeomAdaptor_HCurve.hxx>
-#include <GeomAdaptor_HSurface.hxx>
 #include <GeomAdaptor_Surface.hxx>
 #include <GeomLib_IsPlanarSurface.hxx>
 #include <Geom_Line.hxx>
@@ -1883,8 +1881,10 @@ namespace {
     SMESHDS_Mesh* tgtMeshDS = tgtMesh->GetMeshDS();
 
     Handle(Geom_Surface)             tgtSurface = BRep_Tool::Surface( theTgtFace );
-    Handle(GeomAdaptor_HSurface) tgtSurfAdaptor = new GeomAdaptor_HSurface( tgtSurface );
-    Handle(GeomAdaptor_HCurve)    piercingCurve = new GeomAdaptor_HCurve( thePiercingLine );
+    GeomAdaptor_Surface tgtSurfacea(tgtSurface);
+    Handle(GeomAdaptor_Surface) tgtSurfAdaptor( &tgtSurfacea );
+    GeomAdaptor_Curve thePiercingLinea(thePiercingLine);
+    Handle(GeomAdaptor_Curve)    piercingCurve( &thePiercingLinea );
     IntCurveSurface_HInter intersect;
 
     SMESH_MesherHelper* srcHelper = theSrcWires[0]->FaceHelper();
diff --git a/src/StdMeshers/StdMeshers_ViscousLayers.cxx b/src/StdMeshers/StdMeshers_ViscousLayers.cxx
index b35f5cf3d..d7516fbc4 100644
--- a/src/StdMeshers/StdMeshers_ViscousLayers.cxx
+++ b/src/StdMeshers/StdMeshers_ViscousLayers.cxx
@@ -52,7 +52,6 @@
 #include "StdMeshers_Quadrangle_2D.hxx"
 #include "StdMeshers_ViscousLayers2D.hxx"
 
-#include <Adaptor3d_HSurface.hxx>
 #include <BRepAdaptor_Curve.hxx>
 #include <BRepAdaptor_Curve2d.hxx>
 #include <BRepAdaptor_Surface.hxx>
@@ -1818,8 +1817,8 @@ namespace VISCOUS_3D
     //case GeomAbs_SurfaceOfExtrusion:
     case GeomAbs_OffsetSurface:
     {
-      Handle(Adaptor3d_HSurface) base = surface.BasisSurface();
-      return getRovolutionAxis( base->Surface(), axis );
+      Handle(Adaptor3d_Surface) base (surface.BasisSurface());
+      return getRovolutionAxis( *base, axis );
     }
     default: return false;
     }
