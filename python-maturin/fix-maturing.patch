diff --git a/src/build_options.rs b/src/build_options.rs
index 6ac6c5aeac..14db903bb3 100644
--- a/src/build_options.rs	
+++ b/src/build_options.rs
@@ -1127,7 +1127,7 @@ fn find_interpreter_in_sysconfig(
     let mut interpreters = Vec::new();
     for interp in interpreter {
         let python = interp.display().to_string();
-        let (python_impl, python_ver) = if let Some(ver) = python.strip_prefix("pypy") {
+        let (python_impl, python_verbin) = if let Some(ver) = python.strip_prefix("pypy") {
             (InterpreterKind::PyPy, ver.strip_prefix('-').unwrap_or(ver))
         } else if let Some(ver) = python.strip_prefix("graalpy") {
             (
@@ -1150,22 +1150,23 @@ fn find_interpreter_in_sysconfig(
         } else {
             // if interpreter not known
             if std::path::Path::new(&python).is_file() {
-                bail!("Python interpreter should be a kind of interpreter (e.g. 'python3.8' or 'pypy3.9') when cross-compiling, got path to interpreter: {}", python);
+                (InterpreterKind::CPython, &*python)
             } else {
                 bail!("Unsupported Python interpreter for cross-compilation: {}; supported interpreters are pypy, graalpy, and python (cpython)", python);
             }
         };
+        let python_ver = "3.11";
         if python_ver.is_empty() {
             continue;
         }
         let (ver_major, ver_minor) = python_ver
             .split_once('.')
             .context("Invalid python interpreter version")?;
         let ver_major = ver_major.parse::<usize>().with_context(|| {
-            format!("Invalid python interpreter major version '{ver_major}', expect a digit")
+            format!("Invalid python interpreter major version '{ver_major}', expect a digit in '{python_ver}'")
         })?;
         let ver_minor = ver_minor.parse::<usize>().with_context(|| {
-            format!("Invalid python interpreter minor version '{ver_minor}', expect a digit")
+            format!("Invalid python interpreter minor version '{ver_minor}', expect a digit '{python_ver}'")
         })?;
         let sysconfig = InterpreterConfig::lookup_one(target, python_impl, (ver_major, ver_minor))
             .with_context(|| {

