diff --git a/Make.inc b/Make.inc
index c8ed2e07e..49dc93c0b 100644
--- a/Make.inc
+++ b/Make.inc
@@ -514,11 +514,11 @@ SHIPFLAGS := -O3 -ggdb2 -falign-functions
 endif
 
 ifeq ($(USEMSVC),1)
-CC := compile cl
-CXX := compile cl
+CC := compile clang-cl
+CXX := compile clang-cl
 DEBUGFLAGS := -O0 -Z7 -DJL_DEBUG_BUILD -Gy
 SHIPFLAGS := -O2 -Z7
-JCFLAGS := -std:c11 -D_FILE_OFFSET_BITS=64
+JCFLAGS := -std:c11 -experimental:c11atomics -D_FILE_OFFSET_BITS=64
 JCXXFLAGS := -GR-
 endif
 
@@ -579,11 +579,11 @@ endif
 
 JFFLAGS := -O2 $(fPIC)
 CPP := $(CC) -E
-AR := $(CROSS_COMPILE)ar
-AS := $(CROSS_COMPILE)as
-LD := $(CROSS_COMPILE)ld
-RANLIB := $(CROSS_COMPILE)ranlib
-OBJCOPY := $(CROSS_COMPILE)objcopy
+AR := llvm-ar
+AS := clang
+LD := lld-link
+RANLIB := llvm-ranlib
+OBJCOPY := llvm-objcopy
 
 CPP_STDOUT := $(CPP) -P
 
@@ -932,9 +932,9 @@ endif
 
 # Set MARCH-specific flags
 ifneq ($(MARCH),)
-CC += -march=$(MARCH)
-CXX += -march=$(MARCH)
-FC += -march=$(MARCH)
+#CC += -march=$(MARCH)
+#CXX += -march=$(MARCH)
+#FC += -march=$(MARCH)
 JULIA_CPU_TARGET ?= $(MARCH)
 endif
 
@@ -985,8 +985,8 @@ endif
 ifeq ($(OS),WINNT)
 ifneq ($(ARCH),x86_64)
 ifneq ($(USECLANG),1)
-JCFLAGS += -mincoming-stack-boundary=2
-JCXXFLAGS += -mincoming-stack-boundary=2
+#JCFLAGS += -mincoming-stack-boundary=2
+#JCXXFLAGS += -mincoming-stack-boundary=2
 endif
 endif
 endif
@@ -1160,7 +1160,7 @@ endif
 
 # BinaryBuilder options.  We default to "on" for all the projects listed in BB_PROJECTS,
 # but only if contrib/normalize_triplet.py works for our requested triplet.
-ifeq ($(shell $(call invoke_python,$(JULIAHOME)/contrib/normalize_triplet.py) $(or $(XC_HOST),$(XC_HOST),$(BUILD_MACHINE)) >/dev/null 2>/dev/null; echo $$?),0)
+ifeq (0 ,0)
 USE_BINARYBUILDER ?= 1
 else
 ifneq ($(shell $(call invoke_python,$(JULIAHOME)/contrib/normalize_triplet.py) x86_64-linux-gnu),x86_64-linux-gnu)
@@ -1337,8 +1337,9 @@ endif
 ifeq ($(OS), WINNT)
 HAVE_SSP := 1
 OSLIBS += -Wl,--export-all-symbols -Wl,--version-script=$(JULIAHOME)/src/julia.expmap \
-	$(NO_WHOLE_ARCHIVE) -lpsapi -lkernel32 -lws2_32 -liphlpapi -lwinmm -ldbghelp -luserenv -lsecur32 -latomic
-JLDFLAGS += -Wl,--stack,8388608
+	$(NO_WHOLE_ARCHIVE) -lpsapi -lkernel32 -lws2_32 -liphlpapi -lwinmm -ldbghelp -luserenv -lsecur32 
+#  -latomic
+# JLDFLAGS += -Wl,--stack,8388608
 ifeq ($(ARCH),i686)
 JLDFLAGS += -Wl,--large-address-aware
 endif
@@ -1639,9 +1640,9 @@ endif
 WARNCOLOR:="\033[33;1m"
 ENDCOLOR:="\033[0m"
 
-ifeq ($(VERBOSE), 1)
+ifeq ($(VERBOSE), 0)
 
-QUIET_MAKE = -v
+# QUIET_MAKE = -v
 
 CCCOLOR:="\033[34m"
 LINKCOLOR:="\033[34;1m"
diff --git a/deps/libgit2.mk b/deps/libgit2.mk
index 30d94aeca..3e4d0feeb 100644
--- a/deps/libgit2.mk
+++ b/deps/libgit2.mk
@@ -18,7 +18,7 @@ ifeq ($(OS),WINNT)
 LIBGIT2_OPTS += -DWIN32=ON -DMINGW=ON
 ifneq ($(ARCH),x86_64)
 ifneq ($(USECLANG),1)
-LIBGIT2_OPTS += -DCMAKE_C_FLAGS="-mincoming-stack-boundary=2"
+#LIBGIT2_OPTS += -DCMAKE_C_FLAGS="-mincoming-stack-boundary=2"
 endif
 endif
 ifeq ($(BUILD_OS),WINNT)
diff --git a/src/Makefile b/src/Makefile
index 2955e2b9b..0276eb8f9 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -23,7 +23,7 @@ FLAGS := \
 ifeq ($(USEGCC),1) # GCC bug #25509 (void)__attribute__((warn_unused_result))
 FLAGS += -Wno-unused-result
 endif
-JCFLAGS += -Wold-style-definition -Wstrict-prototypes -Wc++-compat
+#JCFLAGS += -Wold-style-definition -Wstrict-prototypes -Wc++-compat
 
 ifeq ($(USECLANG),1)
 FLAGS += -Wno-return-type-c-linkage
@@ -108,7 +108,7 @@ PUBLIC_HEADERS += $(addprefix $(SRCDIR)/,julia_gcext.h)
 PUBLIC_HEADER_TARGETS := $(addprefix $(build_includedir)/julia/,$(notdir $(PUBLIC_HEADERS)) $(UV_HEADERS))
 
 LLVM_LDFLAGS := $(shell $(LLVM_CONFIG_HOST) --ldflags)
-LLVM_CXXFLAGS := $(shell $(LLVM_CONFIG_HOST) --cxxflags)
+LLVM_CXXFLAGS := $(subst /,-,$(shell $(LLVM_CONFIG_HOST) --cxxflags))
 
 # llvm-config --cxxflags does not return -DNDEBUG
 ifeq ($(shell $(LLVM_CONFIG_HOST) --assertion-mode),OFF)
diff --git a/src/cgutils.cpp b/src/cgutils.cpp
index c091111f3..92205bc60 100644
--- a/src/cgutils.cpp
+++ b/src/cgutils.cpp
@@ -224,14 +224,21 @@ void jl_debugcache_t::initialize(Module *m) {
         julia_h,
         71, // At the time of this writing. Not sure if it's worth it to keep this in sync
         0 * 8, // sizeof(jl_value_t) * 8,
+#ifdef _MSC_VER
+        alignof(void*) * 8, // __alignof__(jl_value_t) * 8,
+#else
         __alignof__(void*) * 8, // __alignof__(jl_value_t) * 8,
+#endif
         DINode::FlagZero, // Flags
         nullptr,    // Derived from
         nullptr);  // Elements - will be corrected later
 
     jl_pvalue_dillvmt = dbuilder.createPointerType(jl_value_dillvmt, sizeof(jl_value_t*) * 8,
+#ifdef _MSC_VER
+                                                alignof(jl_value_t*) * 8);
+#else
                                                 __alignof__(jl_value_t*) * 8);
-
+#endif
     SmallVector<llvm::Metadata *, 1> Elts;
     std::vector<Metadata*> diargs(0);
     Elts.push_back(jl_pvalue_dillvmt);
@@ -239,8 +246,11 @@ void jl_debugcache_t::initialize(Module *m) {
     dbuilder.getOrCreateArray(Elts));
 
     jl_ppvalue_dillvmt = dbuilder.createPointerType(jl_pvalue_dillvmt, sizeof(jl_value_t**) * 8,
+#ifdef _MSC_VER
+                                                    alignof(jl_value_t**) * 8);
+#else
                                                     __alignof__(jl_value_t**) * 8);
-
+#endif
     diargs.push_back(jl_pvalue_dillvmt);    // Return Type (ret value)
     diargs.push_back(jl_pvalue_dillvmt);    // First Argument (function)
     diargs.push_back(jl_ppvalue_dillvmt);   // Second Argument (argv)
diff --git a/src/flisp/flisp.c b/src/flisp/flisp.c
index 32c000802..fe53517c1 100644
--- a/src/flisp/flisp.c
+++ b/src/flisp/flisp.c
@@ -41,8 +41,9 @@
 #include <locale.h>
 #include <limits.h>
 #include <errno.h>
+#ifndef _MSC_VER
 #include <libgen.h> // defines dirname
-
+#endif
 #include "platform.h"
 #include "libsupport.h"
 #include "flisp.h"
@@ -915,7 +916,11 @@ static uint32_t process_keys(fl_context_t *fl_ctx, value_t kwtable,
     uintptr_t n;
     uint32_t extr = nopt+nkw;
     uint32_t ntot = nreq+extr;
+#ifndef _MSC_VER 
     value_t *args = (value_t*)alloca(extr*sizeof(value_t));
+#else
+    value_t *args = (value_t*)_alloca(extr*sizeof(value_t));
+#endif
     value_t v;
     uint32_t i, a = 0, nrestargs;
     value_t s1 = fl_ctx->Stack[fl_ctx->SP-1];
@@ -2406,7 +2411,20 @@ static void lisp_init(fl_context_t *fl_ctx, size_t initial_heapsize)
     char exename[1024];
     size_t exe_size = sizeof(exename) / sizeof(exename[0]);
     if ( uv_exepath(exename, &exe_size) == 0 ) {
+#ifdef _MSC_VER
+        char dir[1024];
+        strcpy(dir, exename);
+        char * last_path_sep = strrchr(dir,'\\');
+        if(last_path_sep != NULL) {
+          last_path_sep[0] = '\0';
+        } else {
+          dir[0] = '.';
+          dir[1] = '\0';
+        }
+        setc(symbol(fl_ctx, "*install-dir*"), cvalue_static_cstring(fl_ctx, strdup(dir)));
+#else
         setc(symbol(fl_ctx, "*install-dir*"), cvalue_static_cstring(fl_ctx, strdup(dirname(exename))));
+#endif
     }
 
     fl_ctx->memory_exception_value = fl_list2(fl_ctx, fl_ctx->OutOfMemoryError,
diff --git a/src/init.c b/src/init.c
index 89f4153ff..0ad6a12af 100644
--- a/src/init.c
+++ b/src/init.c
@@ -11,8 +11,13 @@
 #include <stdio.h>
 #include <fcntl.h>
 #include <errno.h>
+#ifndef _MSC_VER
 #include <libgen.h> // defines dirname
-
+#else
+#define UV_STDIN_FD (HANDLE)STD_INPUT_HANDLE 
+#define UV_STDOUT_FD (HANDLE)STD_OUTPUT_HANDLE 
+#define UV_STDERR_FD (HANDLE)STD_ERROR_HANDLE 
+#endif
 #if !defined(_OS_WINDOWS_) || defined(_COMPILER_GCC_)
 #include <getopt.h>
 #endif
@@ -442,10 +447,10 @@ static void *init_stdio_handle(const char *stdio, uv_os_fd_t fd, int readable)
     // This also helps limit the impact other libraries can cause on our file handle.
     if ((err = uv_dup(fd, &fd)))
         jl_errorf("error initializing %s in uv_dup: %s (%s %d)", stdio, uv_strerror(err), uv_err_name(err), err);
-    switch(uv_guess_handle(fd)) {
+    switch(uv_guess_handle((int)fd)) {
     case UV_TTY:
         handle = malloc_s(sizeof(uv_tty_t));
-        if ((err = uv_tty_init(jl_io_loop, (uv_tty_t*)handle, fd, 0))) {
+        if ((err = uv_tty_init(jl_io_loop, (uv_tty_t*)handle, (int)fd, 0))) {
             jl_errorf("error initializing %s in uv_tty_init: %s (%s %d)", stdio, uv_strerror(err), uv_err_name(err), err);
         }
         ((uv_tty_t*)handle)->data = NULL;
@@ -488,7 +493,7 @@ static void *init_stdio_handle(const char *stdio, uv_os_fd_t fd, int readable)
         if ((err = uv_pipe_init(jl_io_loop, (uv_pipe_t*)handle, 0))) {
             jl_errorf("error initializing %s in uv_pipe_init: %s (%s %d)", stdio, uv_strerror(err), uv_err_name(err), err);
         }
-        if ((err = uv_pipe_open((uv_pipe_t*)handle, fd))) {
+        if ((err = uv_pipe_open((uv_pipe_t*)handle, (int)fd))) {
             jl_errorf("error initializing %s in uv_pipe_open: %s (%s %d)", stdio, uv_strerror(err), uv_err_name(err), err);
         }
         ((uv_pipe_t*)handle)->data = NULL;
@@ -634,7 +639,20 @@ static void jl_resolve_sysimg_location(JL_IMAGE_SEARCH rel)
     if (!jl_options.julia_bindir) {
         jl_options.julia_bindir = getenv("JULIA_BINDIR");
         if (!jl_options.julia_bindir) {
-            jl_options.julia_bindir = dirname(free_path);
+#ifdef _MSC_VER
+        char dir[JL_PATH_MAX];
+        strcpy(dir, free_path);
+        char * last_path_sep = strrchr(dir,'\\');
+        if(last_path_sep != NULL) {
+          last_path_sep[0] = '\0';
+        } else {
+          dir[0] = '.';
+          dir[1] = '\0';
+        }
+        strcpy(jl_options.julia_bindir, dir);
+#else
+        jl_options.julia_bindir = dirname(free_path);
+#endif
         }
     }
     if (jl_options.julia_bindir)
diff --git a/src/interpreter.c b/src/interpreter.c
index 1f9c416d9..298408c33 100644
--- a/src/interpreter.c
+++ b/src/interpreter.c
@@ -659,7 +659,7 @@ jl_code_info_t *jl_code_for_interpreter(jl_method_instance_t *mi)
 
 // interpreter entry points
 
-jl_value_t *NOINLINE jl_fptr_interpret_call(jl_value_t *f, jl_value_t **args, uint32_t nargs, jl_code_instance_t *codeinst)
+NOINLINE jl_value_t * jl_fptr_interpret_call(jl_value_t *f, jl_value_t **args, uint32_t nargs, jl_code_instance_t *codeinst)
 {
     interpreter_state *s;
     jl_method_instance_t *mi = codeinst->def;
@@ -744,7 +744,7 @@ jl_value_t *jl_interpret_opaque_closure(jl_opaque_closure_t *oc, jl_value_t **ar
     return r;
 }
 
-jl_value_t *NOINLINE jl_interpret_toplevel_thunk(jl_module_t *m, jl_code_info_t *src)
+NOINLINE jl_value_t * jl_interpret_toplevel_thunk(jl_module_t *m, jl_code_info_t *src)
 {
     interpreter_state *s;
     unsigned nroots = jl_source_nslots(src) + jl_source_nssavalues(src);
@@ -768,7 +768,7 @@ jl_value_t *NOINLINE jl_interpret_toplevel_thunk(jl_module_t *m, jl_code_info_t
 // deprecated: do not use this method in new code
 // it uses special scoping / evaluation / error rules
 // which should instead be handled in lowering
-jl_value_t *NOINLINE jl_interpret_toplevel_expr_in(jl_module_t *m, jl_value_t *e, jl_code_info_t *src, jl_svec_t *sparam_vals)
+NOINLINE jl_value_t * jl_interpret_toplevel_expr_in(jl_module_t *m, jl_value_t *e, jl_code_info_t *src, jl_svec_t *sparam_vals)
 {
     interpreter_state *s;
     jl_value_t **locals;
diff --git a/src/julia_internal.h b/src/julia_internal.h
index 15e004e0b..d3eef8173 100644
--- a/src/julia_internal.h
+++ b/src/julia_internal.h
@@ -139,7 +139,7 @@ void __tsan_switch_to_fiber(void *fiber, unsigned flags);
 // If we've smashed the stack, (and not just normal NORETURN)
 // this will smash stack-unwind too
 #ifdef _OS_WINDOWS_
-#if defined(_CPU_X86_64_)
+#if defined(_CPU_X86_64_) && !defined(_MSC_VER)
     // install the unhandled exception handler at the top of our stack
     // to call directly into our personality handler
 #define CFI_NORETURN \
@@ -203,7 +203,9 @@ JL_DLLEXPORT void jl_unlock_profile_wr(void) JL_NOTSAFEPOINT;
 // number of cycles since power-on
 static inline uint64_t cycleclock(void) JL_NOTSAFEPOINT
 {
-#if defined(_CPU_X86_64_)
+#ifdef _MSC_VER
+  return __rdtsc(); 
+#elif defined(_CPU_X86_64_)
     uint64_t low, high;
     __asm__ volatile("rdtsc" : "=a"(low), "=d"(high));
     return (high << 32) | low;
diff --git a/src/support/Makefile b/src/support/Makefile
index f52ca8eaf..3db671e58 100644
--- a/src/support/Makefile
+++ b/src/support/Makefile
@@ -1,4 +1,6 @@
 SRCDIR := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))
+$(info SRCDIR is $(SRCDIR))
+
 JULIAHOME := $(abspath $(SRCDIR)/../..)
 BUILDDIR := .
 include $(JULIAHOME)/Make.inc
@@ -7,7 +9,7 @@ JCFLAGS += $(CFLAGS)
 JCXXFLAGS += $(CXXFLAGS)
 JCPPFLAGS += $(CPPFLAGS)
 JLDFLAGS += $(LDFLAGS)
-
+ARCH := x86_64
 SRCS := hashing timefuncs ptrhash operators utf8 ios htable bitvector \
 	int2str libsupportinit arraylist strtod rle
 ifeq ($(OS),WINNT)
@@ -36,14 +41,17 @@ default: release
 $(BUILDDIR):
 	mkdir -p $(BUILDDIR)
 
+$(info BUILDDIR is $(BUILDDIR))
+$(info HEADERS is $(HEADERS))
+
 $(BUILDDIR)/%.o: $(SRCDIR)/%.c $(HEADERS) | $(BUILDDIR)
 	@$(call PRINT_CC, $(CC) $(JCPPFLAGS) $(JCFLAGS) $(SHIPFLAGS) $(DISABLE_ASSERTIONS) -c $< -o $@)
 $(BUILDDIR)/%.dbg.obj: $(SRCDIR)/%.c $(HEADERS) | $(BUILDDIR)
 	@$(call PRINT_CC, $(CC) $(JCPPFLAGS) $(JCFLAGS) $(DEBUGFLAGS) -c $< -o $@)
 $(BUILDDIR)/%.o: $(SRCDIR)/%.S | $(BUILDDIR)
-	@$(call PRINT_CC, $(CC) $(JCPPFLAGS) $(SHIPFLAGS) -c $< -o $@)
+	@$(call PRINT_CC, $(CCAS) $(JCPPFLAGS) $(SHIPFLAGS) -c $< -o $@)
 $(BUILDDIR)/%.dbg.obj: $(SRCDIR)/%.S | $(BUILDDIR)
-	@$(call PRINT_CC, $(CC) $(JCPPFLAGS) $(DEBUGFLAGS) -c $< -o $@)
+	@$(call PRINT_CC, $(CCAS) $(JCPPFLAGS) $(DEBUGFLAGS) -c $< -o $@)
 
 $(BUILDDIR)/host/Makefile:
 	mkdir -p $(BUILDDIR)/host
diff --git a/src/support/dtypes.h b/src/support/dtypes.h
index d49ae0b22..0e28a373c 100644
--- a/src/support/dtypes.h
+++ b/src/support/dtypes.h
@@ -25,6 +25,7 @@
 #include <stdlib.h>
 #include <sys/stat.h>
 #define WIN32_LEAN_AND_MEAN
+#define NOMINMAX
 #include <windows.h>
 
 #if defined(_COMPILER_MICROSOFT_) && !defined(_SSIZE_T_) && !defined(_SSIZE_T_DEFINED)
diff --git a/src/support/platform.h b/src/support/platform.h
index 56f8cafbc..7a07cd449 100644
--- a/src/support/platform.h
+++ b/src/support/platform.h
@@ -33,7 +33,7 @@
 *                               Compiler                                       *
 *******************************************************************************/
 
-#if defined(__clang__)
+#if defined(__clang__) && !defined(_MSC_VER)
 #define _COMPILER_CLANG_
 #elif defined(__GNUC__)
 #define _COMPILER_GCC_
diff --git a/src/sys.c b/src/sys.c
index 2de4bc61a..880db7ffa 100644
--- a/src/sys.c
+++ b/src/sys.c
@@ -140,7 +140,7 @@ JL_DLLEXPORT int32_t jl_fstat(uv_os_fd_t fd, char *statbuf)
     uv_fs_t req;
     int ret;
 
-    ret = uv_fs_fstat(unused_uv_loop_arg, &req, fd, NULL);
+    ret = uv_fs_fstat(unused_uv_loop_arg, &req, (int)fd, NULL);
     if (ret == 0)
         memcpy(statbuf, req.ptr, sizeof(uv_stat_t));
     uv_fs_req_cleanup(&req);
@@ -728,7 +728,7 @@ JL_DLLEXPORT size_t jl_maxrss(void)
 
 // Simple `rand()` like function, with global seed and added thread-safety
 // (but slow and insecure)
-static _Atomic(uint64_t) g_rngseed;
+static _JAtomic(uint64_t) g_rngseed;
 JL_DLLEXPORT uint64_t jl_rand(void) JL_NOTSAFEPOINT
 {
     uint64_t max = UINT64_MAX;
diff --git a/src/task.c b/src/task.c
index 4bb5d666a..699075d5d 100644
--- a/src/task.c
+++ b/src/task.c
@@ -29,7 +29,9 @@
 #include <stdlib.h>
 #include <string.h>
 #include <signal.h>
+#ifndef _MSC_VER
 #include <unistd.h>
+#endif
 #include <errno.h>
 #include <inttypes.h>
 #include "julia.h"
diff --git a/src/win32_ucontext.c b/src/win32_ucontext.c
index c6d437230..8aced1102 100644
--- a/src/win32_ucontext.c
+++ b/src/win32_ucontext.c
@@ -3,6 +3,7 @@
 #include "win32_ucontext.h"
 
 #define WIN32_LEAN_AND_MEAN
+#define NOMINMAX
 #include <windows.h>
 
 #ifdef __cplusplus
