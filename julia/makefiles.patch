diff --git a/Make.inc b/Make.inc
index 35b0657de..e40b502ab 100644
--- a/Make.inc
+++ b/Make.inc
@@ -40,33 +40,33 @@ OPENBLAS_USE_THREAD:=1
 # Flags for using libraries available on the system instead of building them.
 # Please read the notes around usage of SYSTEM flags in README.md
 # Issues resulting from use of SYSTEM versions will generally not be accepted.
-USE_SYSTEM_CSL:=0
-USE_SYSTEM_LLVM:=0
+USE_SYSTEM_CSL:=1
+USE_SYSTEM_LLVM:=1
 USE_SYSTEM_LIBUNWIND:=0
-DISABLE_LIBUNWIND:=0
-USE_SYSTEM_PCRE:=0
-USE_SYSTEM_LIBM:=0
+DISABLE_LIBUNWIND:=1
+USE_SYSTEM_PCRE:=1
+USE_SYSTEM_LIBM:=1
 USE_SYSTEM_OPENLIBM:=0
 UNTRUSTED_SYSTEM_LIBM:=0
-USE_SYSTEM_DSFMT:=0
-USE_SYSTEM_LIBBLASTRAMPOLINE:=0
-USE_SYSTEM_BLAS:=0
-USE_SYSTEM_LAPACK:=0
-USE_SYSTEM_GMP:=0
-USE_SYSTEM_MPFR:=0
-USE_SYSTEM_LIBSUITESPARSE:=0
-USE_SYSTEM_LIBUV:=0
-USE_SYSTEM_UTF8PROC:=0
-USE_SYSTEM_MBEDTLS:=0
-USE_SYSTEM_LIBSSH2:=0
-USE_SYSTEM_NGHTTP2:=0
-USE_SYSTEM_CURL:=0
-USE_SYSTEM_LIBGIT2:=0
+USE_SYSTEM_DSFMT:=1
+USE_SYSTEM_LIBBLASTRAMPOLINE:=1
+USE_SYSTEM_BLAS:=1
+USE_SYSTEM_LAPACK:=1
+USE_SYSTEM_GMP:=1
+USE_SYSTEM_MPFR:=1
+USE_SYSTEM_LIBSUITESPARSE:=1
+USE_SYSTEM_LIBUV:=1
+USE_SYSTEM_UTF8PROC:=1
+USE_SYSTEM_MBEDTLS:=1
+USE_SYSTEM_LIBSSH2:=1
+USE_SYSTEM_NGHTTP2:=1
+USE_SYSTEM_CURL:=1
+USE_SYSTEM_LIBGIT2:=1
 USE_SYSTEM_PATCHELF:=0
-USE_SYSTEM_LIBWHICH:=0
-USE_SYSTEM_ZLIB:=0
-USE_SYSTEM_P7ZIP:=0
-USE_SYSTEM_LLD:=0
+USE_SYSTEM_LIBWHICH:=1
+USE_SYSTEM_ZLIB:=1
+USE_SYSTEM_P7ZIP:=1
+USE_SYSTEM_LLD:=1
 
 # Link to the LLVM shared library
 USE_LLVM_SHLIB := 1
@@ -363,21 +363,23 @@ USE_RV := 0
 
 # Path to cmake (override in Make.user if needed)
 CMAKE ?= cmake
-CMAKE_GENERATOR ?= make
+CMAKE_GENERATOR ?= Ninja
 
 # Point pkg-config to only look at our libraries, overriding whatever
 # the user may have unwittingly set.  To pass PKG_CONFIG_* variables
 # through to the buildsystem, these must be set either on the command
 # line, or through `override` directives within Make.user
-export PKG_CONFIG_PATH = $(JULIAHOME)/usr/lib/pkgconfig
-export PKG_CONFIG_LIBDIR = $(JULIAHOME)/usr/lib/pkgconfig
+# export PKG_CONFIG_PATH = $(JULIAHOME)/usr/lib/pkgconfig
+# export PKG_CONFIG_LIBDIR = $(JULIAHOME)/usr/lib/pkgconfig
 
 # Figure out OS and architecture
 BUILD_OS := $(shell uname)
+BUILD_OS := MINGW
 
 ifneq (,$(findstring CYGWIN,$(BUILD_OS)))
 XC_HOST ?= $(shell uname -m)-w64-mingw32
 endif
+XC_HOST = x86_x64-w64-mingw32
 
 ifeq ($(XC_HOST),)
 CROSS_COMPILE:=
@@ -385,8 +387,8 @@ CROSS_COMPILE:=
 HOSTCC = $(CC)
 HOSTCXX = $(CXX)
 else
-HOSTCC ?= gcc
-HOSTCXX ?= g++
+HOSTCC ?= compile cl
+HOSTCXX ?= compile cl
 OPENBLAS_DYNAMIC_ARCH := 1
 override CROSS_COMPILE:=$(XC_HOST)-
 ifneq (,$(findstring mingw,$(XC_HOST)))
@@ -474,6 +476,11 @@ USECLANG := 0
 USEGCC := 1
 endif
 
+USECLANG = 0
+USEGCC = 0
+USEMSVC = 1
+
+
 FC := $(CROSS_COMPILE)gfortran
 
 # Note: Supporting only macOS Yosemite and above
@@ -501,6 +508,15 @@ DEBUGFLAGS := -O0 -ggdb2 -DJL_DEBUG_BUILD -fstack-protector
 SHIPFLAGS := -O3 -ggdb2 -falign-functions
 endif
 
+ifeq ($(USEMSVC),1)
+CC := compile clang-cl
+CXX := compile clang-cl
+DEBUGFLAGS := -O0 -Z7 -DJL_DEBUG_BUILD -Gy
+SHIPFLAGS := -O2 -Z7
+JCFLAGS := -std:c11 -experimental:c11atomics -D_FILE_OFFSET_BITS=64
+JCXXFLAGS := -GR-
+endif
+
 ifeq ($(USECLANG),1)
 CC := $(CROSS_COMPILE)clang
 CXX := $(CROSS_COMPILE)clang++
@@ -520,7 +536,7 @@ JCPPFLAGS += -D_LARGEFILE_SOURCE -D_DARWIN_USE_64_BIT_INODE=1
 endif
 endif
 
-JLDFLAGS :=
+JLDFLAGS := -Xlinker -DEBUG
 
 ifeq ($(USECCACHE), 1)
 # Expand CC, CXX and FC here already because we want the original definition and not the ccache version.
@@ -557,14 +573,14 @@ FC_ARG := $(shell echo $(FC) 2>/dev/null | cut -s -d' ' -f2-)
 endif
 
 JFFLAGS := -O2 $(fPIC)
-CPP := $(CC) -E
-AR := $(CROSS_COMPILE)ar
-AS := $(CROSS_COMPILE)as
-LD := $(CROSS_COMPILE)ld
-RANLIB := $(CROSS_COMPILE)ranlib
-OBJCOPY := $(CROSS_COMPILE)objcopy
+CPP := $(CC) -E -d1PP -diagnostics:classic
+AR := llvm-ar
+AS := clang
+LD := lld-link
+RANLIB := llvm-ranlib
+OBJCOPY := cp
 
-CPP_STDOUT := $(CPP) -P
+CPP_STDOUT := $(CC) -EP -d1PP -diagnostics:classic
 
 # file extensions
 ifeq ($(OS), WINNT)
@@ -770,14 +786,15 @@ endif
 # JULIA_CPU_TARGET is the JIT-only complement to MARCH. Setting it explicitly is not generally necessary,
 #    since it is set equal to MARCH by default
 
-BUILD_MACHINE := $(shell $(HOSTCC) -dumpmachine)
-
+# BUILD_MACHINE := $(shell $(HOSTCC) -dumpmachine)
+BUILD_MACHINE := x86_64
+ARCH := x86_64
 # Clang spells mingw `-windows-gnu`, but autotools, etc
 # don't recognize that, so canonicalize to mingw32
 BUILD_MACHINE := $(subst windows-gnu,mingw32,$(BUILD_MACHINE))
 
 ifeq ($(ARCH),)
-override ARCH := $(shell $(CC) -dumpmachine | sed "s/\([^-]*\).*$$/\1/")
+# override ARCH := $(shell $(CC) -dumpmachine | sed "s/\([^-]*\).*$$/\1/")
 else
 ifneq ($(XC_HOST),)
 XC_HOST := $(ARCH)$(shell echo $(XC_HOST) | sed "s/[^-]*\(.*\)$$/\1/")
@@ -791,21 +808,14 @@ XC_HOST := $(ARCH)$(shell echo $(BUILD_MACHINE) | sed "s/[^-]*\(.*\)$$/\1/")
 endif
 endif
 
+ARCH=x86_x64
+BUILD_ARCH=x86_x64
+
 # Normalize ppc64le to powerpc64le
 ifeq ($(ARCH), ppc64le)
 override ARCH := powerpc64le
 endif
 
-ifeq ($(ARCH),mingw32)
-$(error "the mingw32 compiler you are using fails the openblas testsuite. please see the README.windows document for a replacement")
-else ifeq (cygwin, $(shell $(CC) -dumpmachine | cut -d\- -f3))
-$(error "cannot build julia with cygwin-target compilers. set XC_HOST to i686-w64-mingw32 or x86_64-w64-mingw32 for mingw cross-compile")
-else ifeq (msys, $(shell $(CC) -dumpmachine | cut -d\- -f3))
-$(error "cannot build julia with msys-target compilers. please see the README.windows document for instructions on setting up mingw-w64 compilers")
-else ifneq (,$(findstring MSYS,$(shell uname)))
-$(error "cannot build julia from a msys shell. please launch a mingw shell instead by setting MSYSTEM=MINGW64")
-endif
-
 ifeq ($(BUILD_OS),Darwin)
 ## Mac is a rather cool 64-bit user-space on 32-bit kernel architecture, so to determine arch we detect
 ## the capabilities of the hardware, rather than the compiler or kernel, and make a substitution
@@ -933,9 +943,9 @@ endif
 
 # Set MARCH-specific flags
 ifneq ($(MARCH),)
-CC += -march=$(MARCH)
-CXX += -march=$(MARCH)
-FC += -march=$(MARCH)
+#CC += -march=$(MARCH)
+#CXX += -march=$(MARCH)
+#FC += -march=$(MARCH)
 JULIA_CPU_TARGET ?= $(MARCH)
 endif
 
@@ -986,8 +996,8 @@ endif
 ifeq ($(OS),WINNT)
 ifneq ($(ARCH),x86_64)
 ifneq ($(USECLANG),1)
-JCFLAGS += -mincoming-stack-boundary=2
-JCXXFLAGS += -mincoming-stack-boundary=2
+#JCFLAGS += -mincoming-stack-boundary=2
+#JCXXFLAGS += -mincoming-stack-boundary=2
 endif
 endif
 endif
@@ -1120,16 +1130,17 @@ endif
 endif
 
 ifeq ($(USE_SYSTEM_LIBM), 1)
-LIBM := -lm
-LIBMNAME := libm
+LIBM :=
+LIBMNAME :=
 else
 LIBM := -lopenlibm
 LIBMNAME := libopenlibm
 endif
 
 ifeq ($(USE_SYSTEM_LIBUV), 1)
-  LIBUV := $(LOCALBASE)/lib/libuv-julia.a
-  LIBUV_INC := $(LOCALBASE)/include
+  LIBUV := -luv 
+  #$(LOCALBASE)/lib/libuv-julia.a
+  # LIBUV_INC := $(LOCALBASE)/include
 else
   LIBUV := $(build_libdir)/libuv.a
   LIBUV_INC := $(build_includedir)
@@ -1161,7 +1172,7 @@ endif
 
 # BinaryBuilder options.  We default to "on" for all the projects listed in BB_PROJECTS,
 # but only if contrib/normalize_triplet.py works for our requested triplet.
-ifeq ($(shell $(call invoke_python,$(JULIAHOME)/contrib/normalize_triplet.py) $(or $(XC_HOST),$(XC_HOST),$(BUILD_MACHINE)) >/dev/null 2>/dev/null; echo $$?),0)
+ifeq (0 ,0)
 USE_BINARYBUILDER ?= 1
 else
 ifneq ($(shell $(call invoke_python,$(JULIAHOME)/contrib/normalize_triplet.py) x86_64-linux-gnu),x86_64-linux-gnu)
@@ -1226,10 +1237,17 @@ endif
 endef
 $(foreach proj,$(BB_PROJECTS),$(eval $(call SET_BB_DEFAULT,$(proj))))
 
+# Some special restrictions on BB usage:
+ifeq ($(USE_SYSTEM_BLAS),1)
+# Since the names don't line up (`BLAS` vs. `OPENBLAS`), manually gate:
+USE_BINARYBUILDER_OPENBLAS := 0
+# Disable BB LIBSUITESPARSE if we're using system BLAS
+USE_BINARYBUILDER_LIBSUITESPARSE := 0
+endif
 
 # Warn if the user tries to build something that requires `gfortran` but they don't have it installed.
 ifeq ($(FC_VERSION),)
-ifneq ($(USE_BINARYBUILDER_OPENBLAS)$(USE_BINARYBUILDER_LIBSUITESPARSE),11)
+ifneq ($(USE_SYSTEM_BLAS)$(USE_SYSTEM_LIBSUITESPARSE),11)
 $(error "Attempting to build OpenBLAS or SuiteSparse without a functioning fortran compiler!")
 endif
 endif
@@ -1332,10 +1350,11 @@ JLIBLDFLAGS += -Wl,-compatibility_version,$(SOMAJOR) -Wl,-current_version,$(JULI
 endif
 
 ifeq ($(OS), WINNT)
-HAVE_SSP := 1
+HAVE_SSP := 0
 OSLIBS += -Wl,--export-all-symbols -Wl,--version-script=$(JULIAHOME)/src/julia.expmap \
-	$(NO_WHOLE_ARCHIVE) -lpsapi -lkernel32 -lws2_32 -liphlpapi -lwinmm -ldbghelp -luserenv -lsecur32 -latomic
-JLDFLAGS += -Wl,--stack,8388608
+	$(NO_WHOLE_ARCHIVE) -lpsapi -lkernel32 -lws2_32 -liphlpapi -lwinmm -ldbghelp -luserenv -lsecur32 
+#  -latomic
+JLDFLAGS += -Wl,-stack:8388608
 ifeq ($(ARCH),i686)
 JLDFLAGS += -Wl,--large-address-aware
 endif
@@ -1407,14 +1426,6 @@ endif # Clang
 CUSTOM_LD_LIBRARY_PATH := LD_LIBRARY_PATH="$(build_libdir)"
 endif
 
-# Some special restrictions on BB usage:
-ifeq ($(USE_SYSTEM_BLAS),1)
-# Since the names don't line up (`BLAS` vs. `OPENBLAS`), manually gate:
-USE_BINARYBUILDER_OPENBLAS := 0
-# Disable BB LIBSUITESPARSE if we're using system BLAS
-USE_BINARYBUILDER_LIBSUITESPARSE := 0
-endif
-
 ifeq ($(USE_SYSTEM_LIBM),1)
 # If we're using system libm, disable BB OpenLibm
 USE_BINARYBUILDER_OPENLIBM := 0
@@ -1502,6 +1513,8 @@ JULIA_BUILD_MODE := debug
 endif
 endif
 
+JULIA_BUILD_MODE := release
+
 JULIA_EXECUTABLE_debug := $(build_bindir)/julia-debug$(EXE)
 JULIA_EXECUTABLE_release := $(build_bindir)/julia$(EXE)
 JULIA_EXECUTABLE := $(JULIA_EXECUTABLE_$(JULIA_BUILD_MODE))
@@ -1530,7 +1543,8 @@ ifeq ($(OS),WINNT)
 ifeq ($(BINARY),32)
 LIBGCC_NAME := libgcc_s_sjlj-1.$(SHLIB_EXT)
 else
-LIBGCC_NAME := libgcc_s_seh-1.$(SHLIB_EXT)
+#LIBGCC_NAME := libgcc_s_seh-1.$(SHLIB_EXT)
+LIBGCC_NAME := 
 endif
 endif
 # On macOS, libgcc_s has soversion 1.1 always on aarch64 and only for GCC 12+
@@ -1636,7 +1650,7 @@ LOADER_DEBUG_INSTALL_DEP_LIBS = $(call build_deplibs, \
 
 # Colors for make
 ifndef VERBOSE
-VERBOSE := 0
+VERBOSE := 1
 endif
 
 WARNCOLOR:="\033[33;1m"
@@ -1644,7 +1658,7 @@ ENDCOLOR:="\033[0m"
 
 ifeq ($(VERBOSE), 0)
 
-QUIET_MAKE = -s
+# QUIET_MAKE = -v
 
 CCCOLOR:="\033[34m"
 LINKCOLOR:="\033[34;1m"
diff --git a/Makefile b/Makefile
index 046f18492..260a3c4ce 100644
--- a/Makefile
+++ b/Makefile
@@ -23,7 +23,7 @@ endif
 VERSDIR := v`cut -d. -f1-2 < $(JULIAHOME)/VERSION`
 
 default: $(JULIA_BUILD_MODE) # contains either "debug" or "release"
-all: debug release
+all: release
 
 # sort is used to remove potential duplicates
 DIRS := $(sort $(build_bindir) $(build_depsbindir) $(build_libdir) $(build_private_libdir) $(build_libexecdir) $(build_includedir) $(build_includedir)/julia $(build_sysconfdir)/julia $(build_datarootdir)/julia $(build_datarootdir)/julia/stdlib $(build_man1dir))
diff --git a/base/Makefile b/base/Makefile
index 493302af7..c0736462b 100644
--- a/base/Makefile
+++ b/base/Makefile
@@ -30,7 +30,7 @@ $(BUILDDIR)/features_h.jl: $(SRCDIR)/../src/features_x86.h $(SRCDIR)/../src/feat
 	@$(call parse_features,aarch64,AArch64)
 
 $(BUILDDIR)/pcre_h.jl: $(PCRE_INCL_PATH)
-	@$(call PRINT_PERL, $(CPP) -D PCRE2_CODE_UNIT_WIDTH=8 -dM $< | perl -nle '/^\s*#define\s+PCRE2_(\w*)\s*\(?($(PCRE_CONST))\)?u?\s*$$/ and print index($$1, "ERROR_") == 0 ? "const $$1 = Cint($$2)" : "const $$1 = UInt32($$2)"' | LC_ALL=C sort > $@)
+	@$(call PRINT_PERL, $(CPP) -DPCRE2_CODE_UNIT_WIDTH=8 -dM $< | perl -nle '/^\s*#define\s+PCRE2_(\w*)\s*\(?($(PCRE_CONST))\)?u?\s*$$/ and print index($$1, "ERROR_") == 0 ? "const $$1 = Cint($$2)" : "const $$1 = UInt32($$2)"' | LC_ALL=C sort > $@)
 
 $(BUILDDIR)/errno_h.jl:
 	@$(call PRINT_PERL, echo '#include <errno.h>' | $(CPP) -dM - | perl -nle 'print "const $$1 = Int32($$2)" if /^#define\s+(E\w+)\s+(\d+)\s*$$/' | LC_ALL=C sort > $@)
@@ -38,8 +38,8 @@ $(BUILDDIR)/errno_h.jl:
 $(BUILDDIR)/file_constants.jl: $(SRCDIR)/../src/file_constants.h
 	@$(call PRINT_PERL, $(CPP_STDOUT) -DJULIA $< | perl -nle 'print "$$1 0o$$2" if /^(\s*const\s+[A-z_]+\s+=)\s+(0[0-9]*)\s*$$/; print "$$1" if /^\s*(const\s+[A-z_]+\s+=\s+([1-9]|0x)[0-9A-z]*)\s*$$/' > $@)
 
-$(BUILDDIR)/uv_constants.jl: $(SRCDIR)/../src/uv_constants.h $(LIBUV_INC)/uv/errno.h
-	@$(call PRINT_PERL, $(CPP_STDOUT) "-I$(LIBUV_INC)" -DJULIA $< | tail -n 16 > $@)
+$(BUILDDIR)/uv_constants.jl: $(SRCDIR)/../src/uv_constants.h
+	@$(call PRINT_PERL, $(CPP_STDOUT) -DJULIA $< | tail -n 16 > $@)
 
 $(BUILDDIR)/build_h.jl.phony:
 	@echo "# This file is automatically generated in base/Makefile" > $@
@@ -279,7 +279,7 @@ endif # WINNT
 
 symlink_libLLVM: $(build_private_libdir)/libLLVM.$(SHLIB_EXT)
 ifneq ($(USE_SYSTEM_LLVM),0)
-LLVM_CONFIG_HOST_LIBS := $(shell $(LLVM_CONFIG_HOST) --libfiles)
+LLVM_CONFIG_HOST_LIBS := -lLLVMSupport -lLLVMDemangle
 # HACK: llvm-config doesn't correctly point to shared libs on all platforms
 #       https://github.com/JuliaLang/julia/issues/29981
 else
diff --git a/cli/Makefile b/cli/Makefile
index c2e2bcd56..a343a68cf 100644
--- a/cli/Makefile
+++ b/cli/Makefile
@@ -7,18 +7,19 @@ include $(JULIAHOME)/deps/llvm-ver.make
 
 HEADERS := $(addprefix $(SRCDIR)/,jl_exports.h loader.h) $(addprefix $(JULIAHOME)/src/,julia_fasttls.h support/platform.h support/dirpath.h jl_exported_data.inc jl_exported_funcs.inc)
 
-LOADER_CFLAGS = $(JCFLAGS) -I$(BUILDROOT)/src -I$(JULIAHOME)/src -I$(JULIAHOME)/src/support -I$(build_includedir) -ffreestanding
-LOADER_LDFLAGS = $(JLDFLAGS) -ffreestanding -L$(build_shlibdir) -L$(build_libdir)
+LOADER_CFLAGS = $(JCFLAGS) -I$(BUILDROOT)/src -I$(JULIAHOME)/src -I$(JULIAHOME)/src/support -I$(build_includedir)
+LOADER_LDFLAGS = $(JLDFLAGS) -L$(build_shlibdir) -L$(build_libdir)
 
 ifeq ($(OS),WINNT)
-LOADER_CFLAGS += -municode -mconsole -nostdlib -fno-stack-check -fno-stack-protector -mno-stack-arg-probe
+LOADER_CFLAGS += -municode -mconsole -Z7
+#-nostdlib -fno-stack-check -fno-stack-protector -mno-stack-arg-probe
 else ifeq ($(OS),Linux)
 LOADER_CFLAGS += -DGLIBCXX_LEAST_VERSION_SYMBOL=\"$(shell echo "$(CSL_NEXT_GLIBCXX_VERSION)" | cut -d'|' -f1 | sed 's/\\//g')\"
 endif
 
 ifeq ($(OS),WINNT)
-LOADER_LDFLAGS += -municode -mconsole -nostdlib --disable-auto-import \
-                  --disable-runtime-pseudo-reloc -lntdll -lkernel32 -lpsapi
+LOADER_LDFLAGS += -municode -mconsole -nostdlib -lntdll -lkernel32 -lpsapi -lShell32 -Xlinker -DEBUG
+# --disable-auto-import --disable-runtime-pseudo-reloc
 else ifeq ($(OS),Linux)
 LOADER_LDFLAGS += -Wl,--no-as-needed -ldl -lpthread -rdynamic -lc -Wl,--as-needed
 else ifeq ($(OS),FreeBSD)
@@ -35,8 +36,8 @@ ifneq (,$(findstring MINGW,$(shell uname)))
 # https://www.msys2.org/wiki/Porting/#filesystem-namespaces
 # We define this environment variable for only these two object files,
 # as they're the only ones that require it at the time of writing.
-$(BUILDDIR)/loader_lib.o: export MSYS2_ARG_CONV_EXCL = -DDEP_LIBS=
-$(BUILDDIR)/loader_lib.dbg.obj: export MSYS2_ARG_CONV_EXCL = -DDEP_LIBS=
+$(BUILDDIR)/loader_lib.o: export MSYS2_ARG_CONV_EXCL=-DDEP_LIBS=
+$(BUILDDIR)/loader_lib.dbg.obj: export MSYS2_ARG_CONV_EXCL=-DDEP_LIBS=
 endif # MSYS2
 
 EXE_OBJS := $(BUILDDIR)/loader_exe.o
@@ -45,6 +46,7 @@ LIB_OBJS := $(BUILDDIR)/loader_lib.o
 LIB_DOBJS := $(BUILDDIR)/loader_lib.dbg.obj
 
 # If this is an architecture that supports dynamic linking, link in a trampoline definition
+ARCH := x86_64
 ifneq (,$(wildcard $(SRCDIR)/trampolines/trampolines_$(ARCH).S))
 LIB_OBJS += $(BUILDDIR)/loader_trampolines.o
 LIB_DOBJS += $(BUILDDIR)/loader_trampolines.o
@@ -63,7 +65,7 @@ $(BUILDDIR)/loader_exe.o : $(SRCDIR)/loader_exe.c $(HEADERS) $(JULIAHOME)/VERSIO
 $(BUILDDIR)/loader_exe.dbg.obj : $(SRCDIR)/loader_exe.c $(HEADERS) $(JULIAHOME)/VERSION
 	@$(call PRINT_CC, $(CC) $(DEBUGFLAGS) $(LOADER_CFLAGS) -c $< -o $@)
 $(BUILDDIR)/loader_trampolines.o : $(SRCDIR)/trampolines/trampolines_$(ARCH).S $(HEADERS) $(SRCDIR)/trampolines/common.h
-	@$(call PRINT_CC, $(CC) $(SHIPFLAGS) $(LOADER_CFLAGS) $< -c -o $@)
+	@$(call PRINT_CC, $(CCAS) $(CCASFLAGS) $(SHIPFLAGS) $(LOADER_CFLAGS) $< -c -o $@)
 
 # Debugging target to help us see what kind of code is being generated for our trampolines
 dump-trampolines: $(SRCDIR)/trampolines/trampolines_$(ARCH).S
@@ -78,7 +80,7 @@ $(BUILDDIR)/julia_res.o: $(JULIAHOME)/contrib/windows/julia.rc $(JULIAHOME)/VERS
 	JLVERi=`echo $$JLVER | perl -nle \
 		'/^(\d+)\.?(\d*)\.?(\d*)/ && \
 		print int $$1,",",int $$2,",",int $$3,",0"'` && \
-	$(CROSS_COMPILE)windres $< -O coff -o $@ -DJLVER=$$JLVERi -DJLVER_STR=\\\"$$JLVER\\\"
+	windres-rc rc $< -O coff -o $@ -DJLVER=$$JLVERi -DJLVER_STR=\\\"$$JLVER\\\"
 EXE_OBJS += $(BUILDDIR)/julia_res.o
 EXE_DOBJS += $(BUILDDIR)/julia_res.o
 endif
@@ -106,7 +108,7 @@ libjulia-debug: $(build_shlibdir)/libjulia-debug.$(SHLIB_EXT)
 
 ifeq ($(OS),WINNT)
 # On Windows we need to strip out exported functions from the generated import library.
-STRIP_EXPORTED_FUNCS := $(shell $(CPP_STDOUT) -I$(JULIAHOME)/src $(SRCDIR)/list_strip_symbols.h)
+#STRIP_EXPORTED_FUNCS := $(shell $(CPP_STDOUT) -I$(JULIAHOME)/src $(SRCDIR)/list_strip_symbols.h)
 endif
 
 $(build_shlibdir)/libjulia.$(JL_MAJOR_MINOR_SHLIB_EXT): $(LIB_OBJS) $(SRCDIR)/list_strip_symbols.h | $(build_shlibdir) $(build_libdir)
@@ -118,6 +120,7 @@ ifeq ($(OS), WINNT)
 	@# Note that if the objcopy command starts getting too long, we can use `@file` to read
 	@# command-line options from `file` instead.
 	@$(call PRINT_ANALYZE, $(OBJCOPY) $(build_libdir)/$(notdir $@).tmp.a $(STRIP_EXPORTED_FUNCS) $(build_libdir)/$(notdir $@).a && rm $(build_libdir)/$(notdir $@).tmp.a)
+	@$(call PRINT_ANALYZE, $(OBJCOPY) $(build_libdir)/$(notdir $@).a $(STRIP_EXPORTED_FUNCS) $(build_libdir)/$(notdir $@).lib)
 endif
 
 $(build_shlibdir)/libjulia-debug.$(JL_MAJOR_MINOR_SHLIB_EXT): $(LIB_DOBJS) $(SRCDIR)/list_strip_symbols.h | $(build_shlibdir) $(build_libdir)
@@ -127,6 +130,7 @@ $(build_shlibdir)/libjulia-debug.$(JL_MAJOR_MINOR_SHLIB_EXT): $(LIB_DOBJS) $(SRC
 	@$(DSYMUTIL) $@
 ifeq ($(OS), WINNT)
 	@$(call PRINT_ANALYZE, $(OBJCOPY) $(build_libdir)/$(notdir $@).tmp.a $(STRIP_EXPORTED_FUNCS) $(build_libdir)/$(notdir $@).a && rm $(build_libdir)/$(notdir $@).tmp.a)
+	@$(call PRINT_ANALYZE, $(OBJCOPY) $(build_libdir)/$(notdir $@).a $(STRIP_EXPORTED_FUNCS) $(build_libdir)/$(notdir $@).lib)
 endif
 
 ifneq ($(OS), WINNT)
@@ -139,10 +143,10 @@ $(build_shlibdir)/libjulia.$(SHLIB_EXT) $(build_shlibdir)/libjulia-debug.$(SHLIB
 endif
 
 $(build_bindir)/julia$(EXE): $(EXE_OBJS) $(build_shlibdir)/libjulia.$(SHLIB_EXT) | $(build_bindir)
-	@$(call PRINT_LINK, $(CC) $(LOADER_CFLAGS) $(SHIPFLAGS) $(EXE_OBJS) -o $@ $(LOADER_LDFLAGS) $(RPATH) -ljulia)
+	@$(call PRINT_LINK, $(CC) $(LOADER_CFLAGS) $(SHIPFLAGS) $(EXE_OBJS) -o $@ $(LOADER_LDFLAGS) $(RPATH) libjulia.dll.a)
 
 $(build_bindir)/julia-debug$(EXE): $(EXE_DOBJS) $(build_shlibdir)/libjulia-debug.$(SHLIB_EXT) | $(build_bindir)
-	@$(call PRINT_LINK, $(CC) $(LOADER_CFLAGS) $(DEBUGFLAGS) $(EXE_DOBJS) -o $@ $(LOADER_LDFLAGS) $(RPATH) -ljulia-debug)
+	@$(call PRINT_LINK, $(CC) $(LOADER_CFLAGS) $(DEBUGFLAGS) $(EXE_DOBJS) -o $@ $(LOADER_LDFLAGS) $(RPATH) libjulia-debug.dll.a)
 
 clean: | $(CLEAN_TARGETS)
 	rm -f $(BUILDDIR)/*.o $(BUILDDIR)/*.dbg.obj
