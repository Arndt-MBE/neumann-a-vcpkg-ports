diff --git a/Make.inc b/Make.inc
index adb8e5446..8e4103028 100644
--- a/Make.inc
+++ b/Make.inc
@@ -583,7 +583,7 @@ AR := llvm-ar
 AS := clang
 LD := lld-link
 RANLIB := llvm-ranlib
-OBJCOPY := llvm-objcopy
+OBJCOPY := cp
 
 CPP_STDOUT := $(CPP) -P
 
@@ -1127,8 +1127,9 @@ LIBMNAME := libopenlibm
 endif
 
 ifeq ($(USE_SYSTEM_LIBUV), 1)
-  LIBUV := $(LOCALBASE)/lib/libuv-julia.a
-  LIBUV_INC := $(LOCALBASE)/include
+  LIBUV := -luv 
+  #$(LOCALBASE)/lib/libuv-julia.a
+  # LIBUV_INC := $(LOCALBASE)/include
 else
   LIBUV := $(build_libdir)/libuv.a
   LIBUV_INC := $(build_includedir)
@@ -1528,7 +1529,8 @@ ifeq ($(OS),WINNT)
 ifeq ($(BINARY),32)
 LIBGCC_NAME := libgcc_s_sjlj-1.$(SHLIB_EXT)
 else
-LIBGCC_NAME := libgcc_s_seh-1.$(SHLIB_EXT)
+#LIBGCC_NAME := libgcc_s_seh-1.$(SHLIB_EXT)
+LIBGCC_NAME := 
 endif
 endif
 # On macOS, libgcc_s has soversion 1.1 always on aarch64 and only for GCC 12+
diff --git a/Makefile b/Makefile
index ef0ade09e..11da8a963 100644
--- a/Makefile
+++ b/Makefile
@@ -232,7 +232,7 @@ endif
 # Note that we disable MSYS2's path munging here, as otherwise
 # it replaces our `:`-separated list as a `;`-separated one.
 define stringreplace
-	MSYS2_ARG_CONV_EXCL='*' $(build_depsbindir)/stringreplace $$(strings -t x - '$1' | grep "$2" | awk '{print $$1;}') "$3" 255 "$(call cygpath_w,$1)"
+	#MSYS2_ARG_CONV_EXCL='*' $(build_depsbindir)/stringreplace $$(strings -t x - '$1' | grep "$2" | awk '{print $$1;}') "$3" 255 "$(call cygpath_w,$1)"
 endef
 
 
@@ -619,7 +619,7 @@ win-extras:
 	cd $(JULIAHOME)/dist-extras && \
 	$(JLDOWNLOAD) https://www.jrsoftware.org/download.php/is.exe && \
 	chmod a+x is.exe && \
-	MSYS2_ARG_CONV_EXCL='*' $(call spawn, $(JULIAHOME)/dist-extras/is.exe /DIR="$(call cygpath_w,$(JULIAHOME)/dist-extras/inno)" /PORTABLE=1 /CURRENTUSER /VERYSILENT)
+	$(call spawn, $(JULIAHOME)/dist-extras/is.exe /DIR="$(call cygpath_w,$(JULIAHOME)/dist-extras/inno)" /PORTABLE=1 /CURRENTUSER /VERYSILENT)
 
 # various statistics about the build that may interest the user
 ifeq ($(USE_SYSTEM_LLVM), 1)
diff --git a/base/Makefile b/base/Makefile
index 0ea0359c8..677ab08df 100644
--- a/base/Makefile
+++ b/base/Makefile
@@ -35,8 +35,8 @@ $(BUILDDIR)/errno_h.jl:
 $(BUILDDIR)/file_constants.jl: $(SRCDIR)/../src/file_constants.h
 	@$(call PRINT_PERL, $(CPP_STDOUT) -DJULIA $< | perl -nle 'print "$$1 0o$$2" if /^(\s*const\s+[A-z_]+\s+=)\s+(0[0-9]*)\s*$$/; print "$$1" if /^\s*(const\s+[A-z_]+\s+=\s+([1-9]|0x)[0-9A-z]*)\s*$$/' > $@)
 
-$(BUILDDIR)/uv_constants.jl: $(SRCDIR)/../src/uv_constants.h $(LIBUV_INC)/uv/errno.h
-	@$(call PRINT_PERL, $(CPP_STDOUT) "-I$(LIBUV_INC)" -DJULIA $< | tail -n 16 > $@)
+$(BUILDDIR)/uv_constants.jl: $(SRCDIR)/../src/uv_constants.h
+	@$(call PRINT_PERL, $(CPP_STDOUT) -DJULIA $< | tail -n 16 > $@)
 
 $(BUILDDIR)/build_h.jl.phony:
 	@echo "# This file is automatically generated in base/Makefile" > $@
@@ -275,7 +275,7 @@ endif # WINNT
 
 symlink_libLLVM: $(build_private_libdir)/libLLVM.$(SHLIB_EXT)
 ifneq ($(USE_SYSTEM_LLVM),0)
-LLVM_CONFIG_HOST_LIBS := $(shell $(LLVM_CONFIG_HOST) --libfiles)
+LLVM_CONFIG_HOST_LIBS := -lLLVMSupport -lLLVMDemangle
 # HACK: llvm-config doesn't correctly point to shared libs on all platforms
 #       https://github.com/JuliaLang/julia/issues/29981
 else
diff --git a/cli/Makefile b/cli/Makefile
index 7ba238e0d..60fd97c3c 100644
--- a/cli/Makefile
+++ b/cli/Makefile
@@ -18,7 +18,7 @@ endif
 
 ifeq ($(OS),WINNT)
 LOADER_LDFLAGS += -municode -mconsole -nostdlib --disable-auto-import \
-                  --disable-runtime-pseudo-reloc -lntdll -lkernel32 -lpsapi
+                  --disable-runtime-pseudo-reloc -lntdll -lkernel32 -lpsapi -lShell32
 else ifeq ($(OS),Linux)
 LOADER_LDFLAGS += -Wl,--no-as-needed -ldl -lpthread -rdynamic -lc -Wl,--as-needed
 else ifeq ($(OS),FreeBSD)
@@ -79,7 +79,7 @@ $(BUILDDIR)/julia_res.o: $(JULIAHOME)/contrib/windows/julia.rc $(JULIAHOME)/VERS
 	JLVERi=`echo $$JLVER | perl -nle \
 		'/^(\d+)\.?(\d*)\.?(\d*)/ && \
 		print int $$1,",",int $$2,",",int $$3,",0"'` && \
-	$(CROSS_COMPILE)windres $< -O coff -o $@ -DJLVER=$$JLVERi -DJLVER_STR=\\\"$$JLVER\\\"
+	windres-rc rc $< -O coff -o $@ -DJLVER=$$JLVERi -DJLVER_STR=\\\"$$JLVER\\\"
 EXE_OBJS += $(BUILDDIR)/julia_res.o
 EXE_DOBJS += $(BUILDDIR)/julia_res.o
 endif
@@ -138,10 +139,10 @@ $(build_shlibdir)/libjulia.$(SHLIB_EXT) $(build_shlibdir)/libjulia-debug.$(SHLIB
 endif
 
 $(build_bindir)/julia$(EXE): $(EXE_OBJS) $(build_shlibdir)/libjulia.$(SHLIB_EXT) | $(build_bindir)
-	@$(call PRINT_LINK, $(CC) $(LOADER_CFLAGS) $(SHIPFLAGS) $(EXE_OBJS) -o $@ $(LOADER_LDFLAGS) $(RPATH) -ljulia)
+	@$(call PRINT_LINK, $(CC) $(LOADER_CFLAGS) $(SHIPFLAGS) $(EXE_OBJS) -o $@ $(LOADER_LDFLAGS) $(RPATH) libjulia.dll.a)
 
 $(build_bindir)/julia-debug$(EXE): $(EXE_DOBJS) $(build_shlibdir)/libjulia-debug.$(SHLIB_EXT) | $(build_bindir)
-	@$(call PRINT_LINK, $(CC) $(LOADER_CFLAGS) $(DEBUGFLAGS) $(EXE_DOBJS) -o $@ $(LOADER_LDFLAGS) $(RPATH) -ljulia-debug)
+	@$(call PRINT_LINK, $(CC) $(LOADER_CFLAGS) $(DEBUGFLAGS) $(EXE_DOBJS) -o $@ $(LOADER_LDFLAGS) $(RPATH) libjulia-debug.dll.a)
 
 clean: | $(CLEAN_TARGETS)
 	rm -f $(BUILDDIR)/*.o $(BUILDDIR)/*.dbg.obj
diff --git a/cli/jl_exports.h b/cli/jl_exports.h
index e9be7c6f2..05e7d6b77 100644
--- a/cli/jl_exports.h
+++ b/cli/jl_exports.h
@@ -3,6 +3,7 @@
 // Bring in the curated lists of exported data and function symbols, then
 // perform C preprocessor magic upon them to generate lists of declarations and
 // functions to re-export our function symbols from libjulia-internal to libjulia.
+#include "../src/julia_atomics.h"
 #include "../src/jl_exported_data.inc"
 #include "../src/jl_exported_funcs.inc"
 
diff --git a/cli/loader_exe.c b/cli/loader_exe.c
index 9187d4f91..32508a4bb 100644
--- a/cli/loader_exe.c
+++ b/cli/loader_exe.c
@@ -25,10 +25,11 @@ JL_DLLEXPORT const char* __asan_default_options(void)
 #endif
 
 #ifdef _OS_WINDOWS_
+#include <shellapi.h>
 int mainCRTStartup(void)
 {
     int argc;
-    LPWSTR * wargv = CommandLineToArgv(GetCommandLine(), &argc);
+    LPWSTR * wargv = CommandLineToArgvW(GetCommandLineW(), &argc);
     char ** argv = (char **)malloc(sizeof(char*) * (argc + 1));
     setup_stdio();
 #else
diff --git a/cli/loader_win_utils.c b/cli/loader_win_utils.c
index f3db4e7c1..12b864649 100644
--- a/cli/loader_win_utils.c
+++ b/cli/loader_win_utils.c
@@ -1,5 +1,8 @@
 // This file is a part of Julia. License is MIT: https://julialang.org/license
 
+#define WIN32_LEAN_AND_MEAN
+#include <Windows.h>
+
 // Workarounds for compiling via mingw without using libgcc_s
 typedef struct {
     HANDLE fd;
@@ -12,6 +15,14 @@ static FILE _stderr = { INVALID_HANDLE_VALUE };
 FILE *stdout = &_stdout;
 FILE *stderr = &_stderr;
 
+void * loader_malloc(const size_t size) {
+    return HeapAlloc(GetProcessHeap(), HEAP_GENERATE_EXCEPTIONS, size);
+}
+
+void loader_free(void* mem) {
+    HeapFree(GetProcessHeap(), 0, mem);
+}
+
 int loader_fwrite(const char *str, size_t nchars, FILE *out) {
     DWORD written;
     if (out->isconsole) {
@@ -38,18 +49,10 @@ int loader_fputs(const char *str, FILE *out) {
     return loader_fwrite(str, loader_strlen(str), out);
 }
 
-void * loader_malloc(const size_t size) {
-    return HeapAlloc(GetProcessHeap(), HEAP_GENERATE_EXCEPTIONS, size);
-}
-
 void * loader_realloc(void * mem, const size_t size) {
     return HeapReAlloc(GetProcessHeap(), HEAP_GENERATE_EXCEPTIONS, mem, size);
 }
 
-void loader_free(void* mem) {
-    HeapFree(GetProcessHeap(), 0, mem);
-}
-
 LPWSTR *CommandLineToArgv(LPWSTR lpCmdLine, int *pNumArgs) {
     LPWSTR out = lpCmdLine;
     LPWSTR cmd = out;
diff --git a/deps/tools/common.mk b/deps/tools/common.mk
index b09786682..e46f20c04 100644
--- a/deps/tools/common.mk
+++ b/deps/tools/common.mk
@@ -40,7 +40,7 @@ CMAKE_COMMON += -DCMAKE_LINKER="$$(which $(LD))" -DCMAKE_AR="$$(which $(AR))" -D
 
 ifeq ($(OS),WINNT)
 CMAKE_COMMON += -DCMAKE_SYSTEM_NAME=Windows
-CMAKE_COMMON += -DCMAKE_RC_COMPILER="$$(which $(CROSS_COMPILE)windres)"
+# CMAKE_COMMON += -DCMAKE_RC_COMPILER="$$(which $(CROSS_COMPILE)windres)"
 endif
 
 # For now this is LLVM specific, but I expect it won't be in the future
diff --git a/src/Makefile b/src/Makefile
index a7dd98ddd..004b75b27 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -118,7 +118,7 @@ endif
 ifeq ($(JULIACODEGEN),LLVM)
 ifneq ($(USE_SYSTEM_LLVM),0)
 # USE_SYSTEM_LLVM != 0
-CG_LLVMLINK += $(LLVM_LDFLAGS) $(shell $(LLVM_CONFIG_HOST) --libs --system-libs)
+# CG_LLVMLINK += $(LLVM_LDFLAGS) $(shell $(LLVM_CONFIG_HOST) --libs --system-libs)
 # HACK: llvm-config doesn't correctly point to shared libs on all platforms
 #       https://github.com/JuliaLang/julia/issues/29981
 else
@@ -141,7 +141,7 @@ FLAGS += -DLLVM_SHLIB
 endif # USE_LLVM_SHLIB == 1
 endif # JULIACODEGEN == LLVM
 
-RT_LLVM_LINK_ARGS := $(shell $(LLVM_CONFIG_HOST) --libs $(RT_LLVM_LIBS) --system-libs --link-static)
+# RT_LLVM_LINK_ARGS := $(shell $(LLVM_CONFIG_HOST) --libs $(RT_LLVM_LIBS) --system-libs --link-static)
 RT_LLVMLINK += $(LLVM_LDFLAGS) $(RT_LLVM_LINK_ARGS)
 ifeq ($(OS), WINNT)
 RT_LLVMLINK += -luuid -lole32
diff --git a/sysimage.mk b/sysimage.mk
index 2d154672d..3a39292a5 100644
--- a/sysimage.mk
+++ b/sysimage.mk
@@ -15,7 +15,7 @@ VERSDIR := v`cut -d. -f1-2 < $(JULIAHOME)/VERSION`
 $(build_private_libdir)/%.$(SHLIB_EXT): $(build_private_libdir)/%-o.a
 	@$(call PRINT_LINK, $(CXX) $(LDFLAGS) -shared $(fPIC) -L$(build_private_libdir) -L$(build_libdir) -L$(build_shlibdir) -o $@ \
 		$(WHOLE_ARCHIVE) $< $(NO_WHOLE_ARCHIVE) \
-		$(if $(findstring -debug,$(notdir $@)),-ljulia-internal-debug -ljulia-debug,-ljulia-internal -ljulia) \
+		$(if $(findstring -debug,$(notdir $@)),libjulia-internal-debug.dll.a libjulia-debug.dll.a,libjulia.dll.a libjulia-internal.dll.a) \
 		$$([ $(OS) = WINNT ] && echo '' -lssp))
 	@$(INSTALL_NAME_CMD)$(notdir $@) $@
 	@$(DSYMUTIL) $@
