diff --git a/numpy/core/meson.build b/numpy/core/meson.build
index 9aaa5ed..e968fb3 100644
--- a/numpy/core/meson.build
+++ b/numpy/core/meson.build
@@ -112,7 +112,7 @@ cdata.set('NPY_SIZEOF_PY_LONG_LONG',
 if cc.has_header('complex.h')
   cdata.set10('HAVE_COMPLEX_H', true)
   cdata.set10('NPY_USE_C99_COMPLEX', true)
-  if cc.get_id() == 'msvc'
+  if cc.get_argument_syntax() == 'msvc'
     complex_types_to_check = [
       ['NPY_HAVE_COMPLEX_FLOAT', 'NPY_SIZEOF_COMPLEX_FLOAT', '_Fcomplex', 'float'],
       ['NPY_HAVE_COMPLEX_DOUBLE', 'NPY_SIZEOF_COMPLEX_DOUBLE', '_Dcomplex', 'double'],
@@ -261,7 +261,7 @@ else
   # function is not available in CI. For the latter there is a fallback path,
   # but that is broken because we don't have the exact long double
   # representation checks.
-  if cc.get_id() != 'msvc'
+  if cc.get_argument_syntax() != 'msvc'
     cdata.set10('HAVE_STRTOLD_L', false)
   endif
 endif
@@ -568,7 +568,7 @@ c_args_common = [
 cpp_args_common = c_args_common + [
   '-D__STDC_VERSION__=0',  # for compatibility with C headers
 ]
-if cc.get_id() != 'msvc'
+if cc.get_argument_syntax() != 'msvc'
   cpp_args_common += [
     '-fno-exceptions',  # no exception support
     '-fno-rtti',  # no runtime type information
diff --git a/numpy/distutils/__pycache__/conv_template.cpython-310.pyc b/numpy/distutils/__pycache__/conv_template.cpython-310.pyc
index b663c56..ba5487d 100644
Binary files a/numpy/distutils/__pycache__/conv_template.cpython-310.pyc and b/numpy/distutils/__pycache__/conv_template.cpython-310.pyc differ
diff --git a/numpy/meson.build b/numpy/meson.build
index cc5a79b..447a1ce 100644
--- a/numpy/meson.build
+++ b/numpy/meson.build
@@ -10,7 +10,7 @@ endif
 # Platform detection
 is_windows = host_machine.system() == 'windows'
 is_mingw = is_windows and cc.get_id() == 'gcc'
-is_msvc = is_windows and cc.get_id() == 'msvc'
+is_msvc = is_windows and cc.get_argument_syntax() == 'msvc'
 
 if is_windows
   # For mingw-w64, link statically against the UCRT.
